"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[36158],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=s(r),m=a,h=u["".concat(c,".").concat(m)]||u[m]||d[m]||l;return r?n.createElement(h,o(o({ref:t},p),{},{components:r})):n.createElement(h,o({ref:t},p))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var s=2;s<l;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},69592:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var n=r(87462),a=(r(67294),r(3905));const l={description:"REFERENCE - Built-in Controls"},o="Tree Data Grid Column Types",i={unversionedId:"reference/controls/detailed-reference/treedatagrid/treedatagrid-column-types",id:"reference/controls/detailed-reference/treedatagrid/treedatagrid-column-types",title:"Tree Data Grid Column Types",description:"REFERENCE - Built-in Controls",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/reference/controls/detailed-reference/treedatagrid/treedatagrid-column-types.md",sourceDirName:"reference/controls/detailed-reference/treedatagrid",slug:"/reference/controls/detailed-reference/treedatagrid/treedatagrid-column-types",permalink:"/avalonia-docs/zh-Hans/docs/next/reference/controls/detailed-reference/treedatagrid/treedatagrid-column-types",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/reference/controls/detailed-reference/treedatagrid/treedatagrid-column-types.md",tags:[],version:"current",frontMatter:{description:"REFERENCE - Built-in Controls"},sidebar:"documentationSidebar",previous:{title:"Hierarchical Tree Data Grid",permalink:"/avalonia-docs/zh-Hans/docs/next/reference/controls/detailed-reference/treedatagrid/creating-a-hierarchical-treedatagrid"},next:{title:"Tree View",permalink:"/avalonia-docs/zh-Hans/docs/next/reference/controls/detailed-reference/treeview-1"}},c={},s=[{value:"Text Column",id:"text-column",level:3},{value:"Hierarchical Expander Column",id:"hierarchical-expander-column",level:3},{value:"Template Column",id:"template-column",level:3}],p={toc:s},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"tree-data-grid-column-types"},"Tree Data Grid Column Types"),(0,a.kt)("p",null,"The tree data grid supports three different column types:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Text Column"),(0,a.kt)("li",{parentName:"ul"},"Hierarchical Expander Column"),(0,a.kt)("li",{parentName:"ul"},"Template Column")),(0,a.kt)("h3",{id:"text-column"},"Text Column"),(0,a.kt)("p",null,"A text column (class ",(0,a.kt)("inlineCode",{parentName:"p"},"TextColumn"),") is useful when you want the cells in a column to have text values. A text column is created like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'new TextColumn<ItemClass, string>("Column Header", x => x.Property)\n')),(0,a.kt)("p",null,"The first generic parameter here is the class of the items that make up the grid rows. The second generic parameter here is the type of the property."," "),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/53405089/157456551-dd394781-903a-4c7b-8874-e631e21534a1.png",alt:null})),(0,a.kt)("p",null,"The above is the signature of the ",(0,a.kt)("inlineCode",{parentName:"p"},"TextColumn")," constructor. The first two parameters are required: the first is the column header, and the second is an expression to get the value of the property."," "),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"TextColumn")," class implements the column interface ",(0,a.kt)("inlineCode",{parentName:"p"},"IColumn"),"."," "),(0,a.kt)("h3",{id:"hierarchical-expander-column"},"Hierarchical Expander Column"),(0,a.kt)("p",null,"A hierarchical expander column (class: ",(0,a.kt)("inlineCode",{parentName:"p"},"HierarchicalExpanderColumn"),") can only be used with the ",(0,a.kt)("em",{parentName:"p"},"hierarchical")," data mode of operation, and it must be used with the data source class ",(0,a.kt)("inlineCode",{parentName:"p"},"HierarchicalTreeDataGridSource"),". This column type must contain an inner column (interface ",(0,a.kt)("inlineCode",{parentName:"p"},"IColumn"),") to define its header and value property. A hierarchical expander column displays the expand and contract chevron buttons in a hierarchical tree data grid."," "),(0,a.kt)("p",null,"This column type is created like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'new HierarchicalExpanderColumn<ItemClass>(\n    new TextColumn<ItemClass, string>("Column Header", x => x.Property), \n    x => x.Children)\n')),(0,a.kt)("p",null,"The generic parameter is the class of the items that make up the grid rows. This is the same as the item class for the inner column."," "),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/53405089/157536079-fd14f1ed-0a7d-438a-abba-fd56766709a9.png",alt:null})),(0,a.kt)("p",null,"The above is the signature of the ",(0,a.kt)("inlineCode",{parentName:"p"},"HierarchicalExpanderColumn")," constructor. The first parameter in the constructor is the inner column, and the second parameter is a (nullable) selector for any child elements."),(0,a.kt)("h3",{id:"template-column"},"Template Column"),(0,a.kt)("p",null,"The template column (class ",(0,a.kt)("inlineCode",{parentName:"p"},"TemplateColumn"),") is a fully customizable way for you to create a column. It essentially forms a ",(0,a.kt)("strong",{parentName:"p"},"data template")," for the column."," "),(0,a.kt)("p",null,"You create a template column like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'new TemplateColumn<ItemClass>("Column Header",\n       new FuncDataTemplate<T>((a,e) => new SomeControl()))\n')),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/53405089/157664231-8653bce9-f8d6-4fbc-8e78-e3ff93f1ace2.png",alt:null})),(0,a.kt)("p",null,"The above is the signature of the ",(0,a.kt)("inlineCode",{parentName:"p"},"TemplateColumn"),"constructor.  It has two required parameters: the first is the column header, and the second is a function that returns ",(0,a.kt)("inlineCode",{parentName:"p"},"IDataTemplate"),"."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"For more information about the concept of creating a ",(0,a.kt)("strong",{parentName:"p"},"data template")," in code, see ",(0,a.kt)("a",{parentName:"p",href:"/avalonia-docs/zh-Hans/docs/next/concepts/templates/creating-data-templates-in-code"},"here"),"."," ")))}d.isMDXComponent=!0}}]);