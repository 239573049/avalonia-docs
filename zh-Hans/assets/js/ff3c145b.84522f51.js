"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[53714],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=o,f=p["".concat(s,".").concat(m)]||p[m]||u[m]||i;return n?r.createElement(f,a(a({ref:t},d),{},{components:n})):r.createElement(f,a({ref:t},d))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},80161:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const i={id:"treeview",title:"TreeView"},a=void 0,l={unversionedId:"controls/treeview",id:"version-0.10.x/controls/treeview",title:"TreeView",description:"The TreeView is a control that presents hierarchical tree data and allows selection of it.",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/version-0.10.x/controls/treeview.md",sourceDirName:"controls",slug:"/controls/treeview",permalink:"/avalonia-docs/zh-Hans/docs/controls/treeview",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/versioned_docs/version-0.10.x/controls/treeview.md",tags:[],version:"0.10.x",frontMatter:{id:"treeview",title:"TreeView"},sidebar:"documentationSidebar",previous:{title:"ToolTip",permalink:"/avalonia-docs/zh-Hans/docs/controls/tooltip"},next:{title:"TransitioningContentControl",permalink:"/avalonia-docs/zh-Hans/docs/controls/transitioningcontentcontrol"}},s={},c=[{value:"Reference",id:"reference",level:3},{value:"Source code",id:"source-code",level:3}],d={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"TreeView")," is a control that presents hierarchical tree data and allows selection of it."),(0,o.kt)("p",null,"One example for populating a ",(0,o.kt)("inlineCode",{parentName:"p"},"TreeView")," can be from a directory on the computer. You can create a ",(0,o.kt)("inlineCode",{parentName:"p"},"TreeView")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"MainWindow.axaml")," file in an Avalonia MVVM project."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-markup"},'<TreeView Items="{Binding Items}" \n      Width="400" Height="480" \n      HorizontalAlignment="Left">\n    <TreeView.ItemTemplate>\n        <TreeDataTemplate ItemsSource="{Binding Subfolders}">\n            <TextBlock Text="{Binding strNodeText}"/>\n        </TreeDataTemplate>\n    </TreeView.ItemTemplate>\n</TreeView>\n')),(0,o.kt)("p",null,"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"MainWindowViewModel.cs")," you can add this code which will recursively look up all the subfolders and populate the TreeView from ",(0,o.kt)("inlineCode",{parentName:"p"},"Items")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Subfolders")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'public ObservableCollection<Node> Items { get; }\npublic ObservableCollection<Node> SelectedItems { get; }\npublic string strFolder { get; set; }\n\npublic MainWindowViewModel()\n{\n    strFolder = @"C:\\Users\\hooty\\Desktop"; // EDIT THIS FOR AN EXISTING FOLDER\n\n    Items = new ObservableCollection<Node>();\n\n    Node rootNode = new Node(strFolder);\n    rootNode.Subfolders = GetSubfolders(strFolder);\n    \n    Items.Add(rootNode);\n}\n\npublic ObservableCollection<Node> GetSubfolders(string strPath)\n{\n    ObservableCollection<Node> subfolders = new ObservableCollection<Node>();\n    string[] subdirs = Directory.GetDirectories(strPath, "*", SearchOption.TopDirectoryOnly);\n\n    foreach (string dir in subdirs)\n    {\n        Node thisnode = new Node(dir);\n\n        if (Directory.GetDirectories(dir, "*", SearchOption.TopDirectoryOnly).Length > 0)\n        {\n            thisnode.Subfolders = new ObservableCollection<Node>();\n\n            thisnode.Subfolders = GetSubfolders(dir);\n        }\n\n        subfolders.Add(thisnode);\n    }\n\n    return subfolders;\n}\n\npublic class Node\n{\n    public ObservableCollection<Node> Subfolders { get; set; }\n\n    public string strNodeText { get; }\n    public string strFullPath { get; }\n\n    public Node(string _strFullPath)\n    {\n        strFullPath = _strFullPath;\n        strNodeText = Path.GetFileName(_strFullPath);\n    }\n}\n')),(0,o.kt)("p",null,"The example project source can be found at ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/hootyjeremy/avalonia-treeview-test"},"avalonia-treeview-test")),(0,o.kt)("h3",{id:"reference"},"Reference"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"http://reference.avaloniaui.net/api/Avalonia.Controls/TreeView/"},"TreeView")),(0,o.kt)("h3",{id:"source-code"},"Source code"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/AvaloniaUI/Avalonia/blob/master/src/Avalonia.Controls/TreeView.cs"},"TreeView.cs")))}u.isMDXComponent=!0}}]);