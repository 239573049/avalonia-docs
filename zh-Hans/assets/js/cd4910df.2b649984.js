"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[85529],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(t),m=r,g=c["".concat(s,".").concat(m)]||c[m]||d[m]||o;return t?a.createElement(g,i(i({ref:n},p),{},{components:t})):a.createElement(g,i({ref:n},p))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=t[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},29285:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var a=t(87462),r=(t(67294),t(3905));const o={id:"converting-binding-values",title:"Converting Binding Values"},i=void 0,l={unversionedId:"data-binding/converting-binding-values",id:"version-0.10.x/data-binding/converting-binding-values",title:"Converting Binding Values",description:"Negating Values",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/version-0.10.x/data-binding/converting-binding-values.md",sourceDirName:"data-binding",slug:"/data-binding/converting-binding-values",permalink:"/avalonia-docs/zh-Hans/docs/data-binding/converting-binding-values",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/versioned_docs/version-0.10.x/data-binding/converting-binding-values.md",tags:[],version:"0.10.x",frontMatter:{id:"converting-binding-values",title:"Converting Binding Values"},sidebar:"documentationSidebar",previous:{title:"Binding to Controls",permalink:"/avalonia-docs/zh-Hans/docs/data-binding/binding-to-controls"},next:{title:"Binding to Commands",permalink:"/avalonia-docs/zh-Hans/docs/data-binding/binding-to-commands"}},s={},u=[{value:"Negating Values",id:"negating-values",level:3},{value:"Binding Converters",id:"binding-converters",level:3},{value:"Built-in Converters",id:"built-in-converters",level:3},{value:"Examples",id:"examples",level:3},{value:"Samples",id:"samples",level:3}],p={toc:u},c="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(c,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"negating-values"},"Negating Values"),(0,r.kt)("p",null,'Often you will need to negate a value that you\'re binding to. A frequent use for this is to show/hide a control or to enable/disable it. You can negate a binding value by prepending a "bang" operator: ',(0,r.kt)("inlineCode",{parentName:"p"},"!"),"."),(0,r.kt)("p",null,"For example you might want to show one control when another control is disabled."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<StackPanel>\n  <TextBox Name="input" IsEnabled="{Binding AllowInput}"/>\n  <TextBlock IsVisible="{Binding !AllowInput}">Sorry, no can do!</TextBlock>\n</StackPanel>\n')),(0,r.kt)("p",null,"Negation also works when binding to non-boolean values. First of all, the value is converted to a boolean using ",(0,r.kt)("inlineCode",{parentName:"p"},"Convert.ToBoolean")," and the result from this is negated. Because the integer value ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," is considered ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," and all other integer values are considered ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", you can use this to show a message when a collection is empty:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<Panel>\n  <ListBox Items="{Binding Items}"/>\n  <TextBlock IsVisible="{Binding !Items.Count}">No results found</TextBlock>\n</Panel>\n')),(0,r.kt)("p",null,'A "double-bang" can be used to convert a non-boolean value to a boolean value. For example to hide a control when a collection is empty:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-markup"},'<Panel>\n  <ListBox Items="{Binding Items}" IsVisible="{Binding !!Items.Count}"/>\n</Panel>\n')),(0,r.kt)("h3",{id:"binding-converters"},"Binding Converters"),(0,r.kt)("p",null,"For more advanced conversions, Avalonia supports ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-gb/dotnet/api/system.windows.data.ivalueconverter?view=netframework-4.7.1"},(0,r.kt)("inlineCode",{parentName:"a"},"IValueConverter"))," the same as other XAML frameworks."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: The ",(0,r.kt)("inlineCode",{parentName:"p"},"IValueConverter")," interface is not available in .NET standard 2.0 so we ship our own, in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Avalonia.Data.Converters")," namespace.")),(0,r.kt)("p",null,"Usage is identical to other XAML frameworks:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<Window xmlns="https://github.com/avaloniaui"\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n        xmlns:local="clr-namespace:ExampleApp;assembly=ExampleApp">\n\n  <Window.Resources>\n    <local:MyConverter x:Key="myConverter"/>\n  </Window.Resources>\n\n  <TextBlock Text="{Binding Value, Converter={StaticResource myConverter}}"/>\n</Window>\n')),(0,r.kt)("h3",{id:"built-in-converters"},"Built-in Converters"),(0,r.kt)("p",null,"Avalonia supplies a number of built-in value converters for common scenarios:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Converter"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"StringConverters.IsNullOrEmpty")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," if the input string is null or empty")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"StringConverters.IsNotNullOrEmpty")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," if the input string is null or empty")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ObjectConverters.IsNull")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," if the input is null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ObjectConverters.IsNotNull")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," if the input is null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"BoolConverters.And")),(0,r.kt)("td",{parentName:"tr",align:null},"A multi-value converter that returns ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," if all inputs are true.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"BoolConverters.Or")),(0,r.kt)("td",{parentName:"tr",align:null},"A multi-value converter that returns ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," if any input is true.")))),(0,r.kt)("p",null,"You can see find list of default converters here: ",(0,r.kt)("a",{parentName:"p",href:"https://docs.avaloniaui.net/api/untitled/avalonia-ui-framework-23/avalonia-ui-framework-24#classtypes"},"Avalonia.Data.Converters Namespace"),"."),(0,r.kt)("h3",{id:"examples"},"Examples"),(0,r.kt)("p",null,"Hiding a ",(0,r.kt)("inlineCode",{parentName:"p"},"TextBlock")," if the bound text is null or empty:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<TextBlock Text="{Binding MyText}"\n           IsVisible="{Binding MyText, Converter={x:Static StringConverters.IsNotNullOrEmpty}}"/>\n')),(0,r.kt)("p",null,"Hiding a ",(0,r.kt)("inlineCode",{parentName:"p"},"ContentControl")," if the bound content is null or empty:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<ContentControl Content="{Binding MyContent}"\n                IsVisible="{Binding MyContent, Converter={x:Static ObjectConverters.IsNotNull}}"/>\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},'from now on assume converters are imported as shown in the previous "Binding Converters" section')),(0,r.kt)("p",null,"Convert text to specific case from a parameter"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<TextBlock Text="{Binding TheContent, \n    Converter={StaticResource textCaseConverter},\n    ConverterParameter=lower}" />\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public class TextCaseConverter : IValueConverter\n{\n    public static readonly TextCaseConverter Instance = new();\n\n    public object? Convert( object? value, Type targetType, object? parameter, CultureInfo culture )\n    {\n        if (value is string sourceText && parameter is string targetCase\n            && targetType.IsAssignableTo(typeof(string)))\n        {\n            switch (targetCase)\n            {\n                case "upper":\n                case "SQL":\n                    return sourceText.ToUpper();\n                case "lower":\n                    return sourceText.ToLower();\n                case "title": // Every First Letter Uppercase\n                    var txtinfo = new System.Globalization.CultureInfo("en-US",false).TextInfo;\n                    return txtinfo.ToTitleCase(sourceText);\n                default:\n                    // invalid option, return the exception below\n                    break;\n            }\n        }\n        // converter used for the wrong type\n        return new BindingNotification(new InvalidCastException(), BindingErrorType.Error);\n    }\n\n    public object ConvertBack( object? value, Type targetType, object? parameter, CultureInfo culture )\n    {\n      throw new NotSupportedException();\n    }\n}\n')),(0,r.kt)("p",null,"Converting a bound object to different target types contextually"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<Image Width="42" \n       Source="{Binding Animal, Converter={StaticResource animalConverter}}"/>\n<TextBlock \n       Text="{Binding Animal, Converter={StaticResource animalConverter}}" />\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public class AnimalConverter : IValueConverter\n{\n    public static readonly AnimalConverter Instance = new();\n\n    public object? Convert( object? value, Type targetType, object? parameter, CultureInfo culture )\n    {\n        if (value is Animal animal)\n        {\n            if (targetType.IsAssignableTo(typeof(IImage)))\n            {\n                img = @"icons/generic-animal-placeholder.png"\n                switch (animal)\n                {\n                    case Dog d:\n                      img = d.IsGoodBoy ? @"icons/dog-happy.png" : @"icons/dog.png";\n                      break;\n                    case Cat:\n                      img = @"icons/cat.png";\n                      break;\n                    // etc. etc.\n                }\n                // see https://docs.avaloniaui.net/docs/guides/data-binding/how-to-create-a-custom-data-binding-converter\n                return BitmapAssetValueConverter.Instance\n                    .Convert(img, typeof(Bitmap), parameter, culture);\n            }\n            else if (targetType.IsAssignableTo(typeof(string)))\n            {\n                return !string.IsNullOrEmpty(animal.NickName) ? \n                    $"{animal.Name} \\"{animal.NickName}\\"" : animal.Name;\n            }\n        }\n        // converter used for the wrong type\n        return new BindingNotification(new InvalidCastException(), BindingErrorType.Error);\n        \n    }\n\n    public object ConvertBack( object? value, Type targetType, object? parameter, CultureInfo culture )\n    {\n      throw new NotSupportedException();\n    }\n}\n')),(0,r.kt)("h3",{id:"samples"},"Samples"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/AvaloniaUI/Avalonia.Samples/tree/main/src/Avalonia.Samples/MVVM/ValueConversionSample"},"ValueConverter Sample")))}d.isMDXComponent=!0}}]);