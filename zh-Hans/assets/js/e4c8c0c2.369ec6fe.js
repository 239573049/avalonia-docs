"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[85836],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var i=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,i,l=function(e,t){if(null==e)return{};var n,i,l={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=i.createContext({}),d=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=d(e.components);return i.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),p=d(n),u=l,h=p["".concat(s,".").concat(u)]||p[u]||m[u]||o;return n?i.createElement(h,a(a({ref:t},c),{},{components:n})):i.createElement(h,a({ref:t},c))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,a=new Array(o);a[0]=u;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[p]="string"==typeof e?e:l,a[1]=r;for(var d=2;d<o;d++)a[d]=n[d];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},65847:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var i=n(87462),l=(n(67294),n(3905));const o={id:"listbox",title:"ListBox"},a=void 0,r={unversionedId:"controls/listbox",id:"version-0.10.x/controls/listbox",title:"ListBox",description:"The ListBox is an ItemsControl which displays items in a multi-line list box and allows individual selection.",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/version-0.10.x/controls/listbox.md",sourceDirName:"controls",slug:"/controls/listbox",permalink:"/avalonia-docs/zh-Hans/docs/controls/listbox",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/versioned_docs/version-0.10.x/controls/listbox.md",tags:[],version:"0.10.x",frontMatter:{id:"listbox",title:"ListBox"},sidebar:"documentationSidebar",previous:{title:"LayoutTransformControl",permalink:"/avalonia-docs/zh-Hans/docs/controls/layouttransformcontrol"},next:{title:"MaskedTextBox",permalink:"/avalonia-docs/zh-Hans/docs/controls/maskedtextbox"}},s={},d=[{value:"Customizing the item display",id:"customizing-the-item-display",level:2},{value:"Containers",id:"containers",level:2},{value:"Selection",id:"selection",level:2},{value:"SelectionMode",id:"selectionmode",level:3},{value:"SelectedIndex",id:"selectedindex",level:3},{value:"SelectedItem",id:"selecteditem",level:3},{value:"Selection",id:"selection-1",level:3},{value:"SelectedItems",id:"selecteditems",level:3},{value:"Preventing Horizontal Scrolling",id:"preventing-horizontal-scrolling",level:2},{value:"Source code",id:"source-code",level:2}],c={toc:d},p="wrapper";function m(e){let{components:t,...n}=e;return(0,l.kt)(p,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"ListBox")," is an ",(0,l.kt)("inlineCode",{parentName:"p"},"ItemsControl")," which displays items in a multi-line list box and allows individual selection."),(0,l.kt)("p",null,"The items to display in the ",(0,l.kt)("inlineCode",{parentName:"p"},"ListBox")," are specified using the ",(0,l.kt)("inlineCode",{parentName:"p"},"Items")," property. This property will often be bound to a collection on the control's ",(0,l.kt)("inlineCode",{parentName:"p"},"DataContext"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-markup"},'<ListBox Items="{Binding MyItems}"/>\n')),(0,l.kt)("h2",{id:"customizing-the-item-display"},"Customizing the item display"),(0,l.kt)("p",null,"You can customize how an item is displayed by specifying an ",(0,l.kt)("inlineCode",{parentName:"p"},"ItemTemplate"),". For example to display each item inside a red border with rounded corners:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-markup"},'<ListBox Items="{Binding MyItems}">\n    <ListBox.ItemTemplate>\n        <DataTemplate>\n            <Border Background="Red" CornerRadius="4" Padding="4">\n                <TextBlock Text="{Binding}"/>\n            </Border>\n        </DataTemplate>\n    </ListBox.ItemTemplate>\n</ListBox>\n')),(0,l.kt)("h2",{id:"containers"},"Containers"),(0,l.kt)("p",null,"Each item displayed in a ",(0,l.kt)("inlineCode",{parentName:"p"},"ListBox")," will be wrapped in a ",(0,l.kt)("inlineCode",{parentName:"p"},"ListBoxItem")," - this is called the ",(0,l.kt)("em",{parentName:"p"},"container"),". The container hosts the content specified in the ",(0,l.kt)("inlineCode",{parentName:"p"},"ItemTemplate")," but it is not part of the ",(0,l.kt)("inlineCode",{parentName:"p"},"ItemTemplate")," itself. It is the container that contains the logic for displaying selected items."),(0,l.kt)("p",null,"Sometimes you will want to customize the container itself. You can do this by including a style targeting ",(0,l.kt)("inlineCode",{parentName:"p"},"ListBoxItem")," in the ",(0,l.kt)("inlineCode",{parentName:"p"},"ListBox"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-markup"},'<ListBox Items="{Binding Items}">\n    <ListBox.Styles>\n        \x3c!-- Give the ListBoxItems a fixed with of 100 and right-align them --\x3e\n        <Style Selector="ListBoxItem">\n            <Setter Property="Width" Value="100"/>\n            <Setter Property="HorizontalAlignment" Value="Right"/>\n        </Style>\n    </ListBox.Styles>\n</ListBox>\n')),(0,l.kt)("p",null,"In WPF and UWP this is done via the ",(0,l.kt)("inlineCode",{parentName:"p"},"ItemContainerStyle")," - this property does not exist in Avalonia; you should use the method outlined above."),(0,l.kt)("h2",{id:"selection"},"Selection"),(0,l.kt)("p",null,"There are several properties related to selection on ",(0,l.kt)("inlineCode",{parentName:"p"},"ListBox"),":"),(0,l.kt)("p",null,"It is recommended that you only bind one of the ",(0,l.kt)("inlineCode",{parentName:"p"},"SelectedIndex"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"SelectedItem"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"SelectedItems")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"Selection")," properties."),(0,l.kt)("h3",{id:"selectionmode"},"SelectionMode"),(0,l.kt)("p",null,"Controls the type of selection that can be made on the ",(0,l.kt)("inlineCode",{parentName:"p"},"ListBox"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Property"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Single")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Only a single item can be selected ","(","default",")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Multiple")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Multiple items can be selected")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Toggle")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Item selection can be toggled by tapping/spacebar. When not enabled, shift or ctrl must be used to select multiple items")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"AlwaysSelected")),(0,l.kt)("td",{parentName:"tr",align:"left"},"An item will always be selected as long as there are items to select.")))),(0,l.kt)("p",null,"These values can be combined, e.g.:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-markup"},'<ListBox SelectionMode="Multiple,Toggle"/>\n')),(0,l.kt)("h3",{id:"selectedindex"},"SelectedIndex"),(0,l.kt)("p",null,"Exposes the index of the selected item, or in the case of multiple selection the first selected item. You will often want to bind this to a view model if your list ",(0,l.kt)("inlineCode",{parentName:"p"},"SelectionMode")," is set to ",(0,l.kt)("inlineCode",{parentName:"p"},"Single"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-markup"},'<ListBox SelectedIndex="{Binding SelectedIndex}"/>\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"public MyViewModel : ReactiveObject\n{\n    int selectedIndex;\n\n    public int SelectedIndex\n    {\n        get => selectedIndex;\n        set => this.RaiseAndSetIfChanged(ref selectedIndex, value);\n    }\n}\n")),(0,l.kt)("p",null,"By default bindings to this property are two-way."),(0,l.kt)("h3",{id:"selecteditem"},"SelectedItem"),(0,l.kt)("p",null,"Exposes the selected item in the ",(0,l.kt)("inlineCode",{parentName:"p"},"Items")," collection, or in the case of multiple selection the first selected item. You will often want to bind this to a view model if your list ",(0,l.kt)("inlineCode",{parentName:"p"},"SelectionMode")," is set to ",(0,l.kt)("inlineCode",{parentName:"p"},"Single"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-markup"},'<ListBox SelectedItem="{Binding SelectedItem}"/>\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"public MyViewModel : ReactiveObject\n{\n    MyItem selectedItem;\n\n    public MyItem SelectedItem\n    {\n        get => selectedItem;\n        set => this.RaiseAndSetIfChanged(ref selectedItem, value);\n    }\n}\n")),(0,l.kt)("p",null,"By default bindings to this property are two-way."),(0,l.kt)("p",null,"Do not bind to this property if your ",(0,l.kt)("inlineCode",{parentName:"p"},"Items")," collection contains duplicates as it is impossible to distinguish between duplicate values."),(0,l.kt)("h3",{id:"selection-1"},"Selection"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Selection")," property exposes an ",(0,l.kt)("inlineCode",{parentName:"p"},"ISelectionModel")," object with various methods to track multiple selected items. You can create a ",(0,l.kt)("inlineCode",{parentName:"p"},"SelectionModel")," object in your view model and bind it to this property and subsequently control the selection from your view model."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"ISelectionModel")," is optimized for large collections. Because of this it is recommended that you use this property in preference to ",(0,l.kt)("inlineCode",{parentName:"p"},"SelectedItems")," for performance reasons."),(0,l.kt)("p",null,"Once ",(0,l.kt)("inlineCode",{parentName:"p"},"Selection")," is bound to a ",(0,l.kt)("inlineCode",{parentName:"p"},"SelectionModel"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"SelectedItems")," will no longer function."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"SelectionModel")," also exposes batching functionality through its ",(0,l.kt)("inlineCode",{parentName:"p"},"Update()")," method and a ",(0,l.kt)("inlineCode",{parentName:"p"},"SelectionChanged")," event which details exactly which items have been selected and deselected."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-markup"},'<ListBox Items="{Binding Items}" Selection="{Binding Selection}"/>\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"public class MyViewModel\n{\n    public MyViewModel()\n    {\n        Items = CreateItems();\n\n        // SelectionModel.Source can be set to Items here, or if it is left null it will be set by\n        // the `ListBox` when bound.\n        Selection = new SelectionModel();\n        Selection.SelectionChanged += SelectionChanged;\n\n        // Select item 10 in Items.\n        Selection.Select(10);\n    }\n\n    public ObservableCollection<MyItem> Items { get; }\n    public SelectionModel Selection { get; }\n\n    // A method bound to e.g. a button which will select the first 100 items.\n    public void SelectFirst100() => Selection.SelectRange(0, 99);\n\n    // Switch to single selection via the view model.\n    public void SwitchToSingleSelect() => Selection.SingleSelect = true;\n\n    void SelectionChanged(object sender, SelectionModelSelectionChangedEventArgs e)\n    {\n        // ... handle selection changed\n    }\n}\n")),(0,l.kt)("p",null,"By default bindings to this property are one-way."),(0,l.kt)("h3",{id:"selecteditems"},"SelectedItems"),(0,l.kt)("p",null,"This property holds the selected items in an ",(0,l.kt)("inlineCode",{parentName:"p"},"IList"),". It can be bound to any list that implements ",(0,l.kt)("inlineCode",{parentName:"p"},"IList")," but it will usually be bound to a collection which also implements ",(0,l.kt)("inlineCode",{parentName:"p"},"INotifyCollectionChanged")," such as ",(0,l.kt)("inlineCode",{parentName:"p"},"ObservableCollection<>"),"."),(0,l.kt)("p",null,"For various reasons the performance of ",(0,l.kt)("inlineCode",{parentName:"p"},"SelectedItems")," can be very poor, particularly on large collections. It is recommended that you use the ",(0,l.kt)("inlineCode",{parentName:"p"},"Selection")," property instead."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-markup"},'<ListBox SelectedItems="{Binding SelectedItems}"/>\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"public MyViewModel : ReactiveObject\n{\n    public ObservableCollection<MyItem> SelectedItems { get; } = new ObservableCollection<MyItem>();\n}\n")),(0,l.kt)("h2",{id:"preventing-horizontal-scrolling"},"Preventing Horizontal Scrolling"),(0,l.kt)("p",null,"By default if an item is too wide to display in the ",(0,l.kt)("inlineCode",{parentName:"p"},"ListBox"),", a horizontal scrollbar will be displayed. If instead you want items to be constrained to the width of the ",(0,l.kt)("inlineCode",{parentName:"p"},"ListBox")," ","(","for example if you want wrapping text in the items",")"," you can disable the horizontal scrollbar by setting ",(0,l.kt)("inlineCode",{parentName:"p"},'ScrollViewer.HorizontalScrollBarVisibility="Disabled"'),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-markup"},'<ListBox Items="{Binding MyItems}" Width="250" ScrollViewer.HorizontalScrollBarVisibility="Disabled">\n    <ListBox.ItemTemplate>\n        <DataTemplate>\n            <Border Background="Red" CornerRadius="4" Padding="4">\n                <TextBlock Text="{Binding}" TextWrapping="Wrap"/>\n            </Border>\n        </DataTemplate>\n    </ListBox.ItemTemplate>\n</ListBox>\n')),(0,l.kt)("h2",{id:"source-code"},"Source code"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/AvaloniaUI/Avalonia/blob/master/src/Avalonia.Controls/ListBox.cs"},"ListBox.cs")))}m.isMDXComponent=!0}}]);