"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[44426],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var s=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},l=Object.keys(e);for(s=0;s<l.length;s++)n=l[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(s=0;s<l.length;s++)n=l[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=s.createContext({}),c=function(e){var t=s.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return s.createElement(i.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},m=s.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,y=u["".concat(i,".").concat(m)]||u[m]||d[m]||l;return n?s.createElement(y,r(r({ref:t},p),{},{components:n})):s.createElement(y,r({ref:t},p))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,r=new Array(l);r[0]=m;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o[u]="string"==typeof e?e:a,r[1]=o;for(var c=2;c<l;c++)r[c]=n[c];return s.createElement.apply(null,r)}return s.createElement.apply(null,n)}m.displayName="MDXCreateElement"},97548:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var s=n(87462),a=(n(67294),n(3905));const l={id:"style-classes",title:"Style Classes"},r="Style Classes",o={unversionedId:"basics/user-interface/styling/style-classes",id:"basics/user-interface/styling/style-classes",title:"Style Classes",description:"You can assign an Avalonia UI control one or more style classes, and use these to guide style selection. Style classes are assigned in a control element using the Classes attribute. If you want to assign more than one class, then use a space-separated list.&#x20;",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/basics/user-interface/styling/style-classes.md",sourceDirName:"basics/user-interface/styling",slug:"/basics/user-interface/styling/style-classes",permalink:"/avalonia-docs/zh-Hans/docs/next/basics/user-interface/styling/style-classes",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/basics/user-interface/styling/style-classes.md",tags:[],version:"current",frontMatter:{id:"style-classes",title:"Style Classes"},sidebar:"documentationSidebar",previous:{title:"Styles",permalink:"/avalonia-docs/zh-Hans/docs/next/basics/user-interface/styling/styles"},next:{title:"Control Themes",permalink:"/avalonia-docs/zh-Hans/docs/next/basics/user-interface/styling/control-themes"}},i={},c=[{value:"Pseudo Classes",id:"pseudo-classes",level:2},{value:"Conditional Classes",id:"conditional-classes",level:2},{value:"Classes in Code",id:"classes-in-code",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,s.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"style-classes"},"Style Classes"),(0,a.kt)("p",null,"You can assign an ",(0,a.kt)("em",{parentName:"p"},"Avalonia UI")," control one or more style classes, and use these to guide style selection. Style classes are assigned in a control element using the ",(0,a.kt)("inlineCode",{parentName:"p"},"Classes")," attribute. If you want to assign more than one class, then use a space-separated list."," "),(0,a.kt)("p",null,"For example, this button has both the ",(0,a.kt)("inlineCode",{parentName:"p"},"h1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"blue")," style classes applied:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-markup"},'<Button Classes="h1 blue"/>\n')),(0,a.kt)("h2",{id:"pseudo-classes"},"Pseudo Classes"),(0,a.kt)("p",null,"Like in CSS, controls can have pseudo classes; these are classes that are defined in the control itself rather than by the user. The names of pseudo classes in a selector always start with a colon."),(0,a.kt)("p",null,"For example ",(0,a.kt)("inlineCode",{parentName:"p"},":pointerover")," pseudo class indicates that the pointer input is currently over (inside the bounds of) a control. (This is pseudo class is the similar to ",(0,a.kt)("inlineCode",{parentName:"p"},":hover")," in CSS.)"),(0,a.kt)("p",null,"This is an example of  a ",(0,a.kt)("inlineCode",{parentName:"p"},":pointerover")," pseudo class selector:"," "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-markup"},'<StackPanel>\n  <StackPanel.Styles>\n    <Style Selector="Border:pointerover">\n      <Setter Property="Background" Value="Red"/>\n    </Style>\n  </StackPanel.Styles>\n  <Border>\n    <TextBlock>I will have red background when hovered.</TextBlock>\n  </Border>\n</StackPanel>\n')),(0,a.kt)("p",null,"In this example, the pseudo class selector changes properties inside a control template:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-markup"},'<StackPanel>\n  <StackPanel.Styles>\n    <Style Selector="Button:pressed /template/ ContentPresenter">\n        <Setter Property="TextBlock.Foreground" Value="Red"/>\n    </Style>\n  </StackPanel.Styles>\n  <Button>I will have red text when pressed.</Button>\n</StackPanel>\n')),(0,a.kt)("p",null,"Other pseudo classes include ",(0,a.kt)("inlineCode",{parentName:"p"},":focus"),", ",(0,a.kt)("inlineCode",{parentName:"p"},":disabled"),", ",(0,a.kt)("inlineCode",{parentName:"p"},":pressed")," for buttons, and ",(0,a.kt)("inlineCode",{parentName:"p"},":checked")," for checkboxes."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"For more detail about pseudo classes, see the reference ",(0,a.kt)("a",{parentName:"p",href:"/avalonia-docs/zh-Hans/docs/next/reference/styles/pseudo-classes"},"here"),".")),(0,a.kt)("h2",{id:"conditional-classes"},"Conditional Classes"),(0,a.kt)("p",null,"If you need to add or remove a class using a bound condition, then you can use following special syntax:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-markup"},'<Button Classes.accent="{Binding IsSpecial}" />\n')),(0,a.kt)("h2",{id:"classes-in-code"},"Classes in Code"),(0,a.kt)("p",null,"You can manipulate style classes in code using the ",(0,a.kt)("inlineCode",{parentName:"p"},"Classes")," collection:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'control.Classes.Add("blue");\ncontrol.Classes.Remove("red");\n')))}d.isMDXComponent=!0}}]);