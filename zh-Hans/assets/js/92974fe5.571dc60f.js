"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[82173],{3905:(e,t,i)=>{i.d(t,{Zo:()=>c,kt:()=>f});var n=i(67294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function l(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function r(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),i=t;return e&&(i="function"==typeof e?e(t):l(l({},t),e)),i},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),m=s(i),u=a,f=m["".concat(p,".").concat(u)]||m[u]||d[u]||o;return i?n.createElement(f,l(l({ref:t},c),{},{components:i})):n.createElement(f,l({ref:t},c))}));function f(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=i.length,l=new Array(o);l[0]=u;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r[m]="string"==typeof e?e:a,l[1]=r;for(var s=2;s<o;s++)l[s]=i[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,i)}u.displayName="MDXCreateElement"},68788:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>s});var n=i(87462),a=(i(67294),i(3905));const o={description:"CONCEPTS"},l="Application Lifetimes",r={unversionedId:"concepts/application-lifetimes",id:"concepts/application-lifetimes",title:"Application Lifetimes",description:"CONCEPTS",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/concepts/application-lifetimes.md",sourceDirName:"concepts",slug:"/concepts/application-lifetimes",permalink:"/avalonia-docs/zh-Hans/docs/next/concepts/application-lifetimes",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/concepts/application-lifetimes.md",tags:[],version:"current",frontMatter:{description:"CONCEPTS"},sidebar:"documentationSidebar",previous:{title:"Deep Dives",permalink:"/avalonia-docs/zh-Hans/docs/next/concepts/"},next:{title:"Attached Properties",permalink:"/avalonia-docs/zh-Hans/docs/next/concepts/attached-property"}},p={},s=[{value:"How do lifetimes work?",id:"how-do-lifetimes-work",level:2},{value:"Lifetime Interfaces",id:"lifetime-interfaces",level:2},{value:"IControlledApplicationLifetime",id:"icontrolledapplicationlifetime",level:3},{value:"IClassicDesktopStyleApplicationLifetime",id:"iclassicdesktopstyleapplicationlifetime",level:3},{value:"ISingleViewApplicationLifetime",id:"isingleviewapplicationlifetime",level:3},{value:"Manual Lifetime Management",id:"manual-lifetime-management",level:2}],c={toc:s},m="wrapper";function d(e){let{components:t,...i}=e;return(0,a.kt)(m,(0,n.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"application-lifetimes"},"Application Lifetimes"),(0,a.kt)("p",null,"Not all platforms are created equal! For example, the lifetime management that you may be used to developing with in Windows Forms or WPF can operate only on desktop-style platforms. ",(0,a.kt)("em",{parentName:"p"},"Avalonia UI")," is a cross-platform framework; so to make your application portable, it provides several different lifetime models for your application, and also allows you to control everything manually if the target platform permits."),(0,a.kt)("h2",{id:"how-do-lifetimes-work"},"How do lifetimes work?"),(0,a.kt)("p",null,"For a desktop application, you initialise like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"class Program\n{\n  // This method is needed for IDE previewer infrastructure\n  public static AppBuilder BuildAvaloniaApp() \n    => AppBuilder.Configure<App>().UsePlatformDetect();\n\n  // The entry point. Things aren't ready yet, so at this point\n  // you shouldn't use any Avalonia types or anything that expects\n  // a SynchronizationContext to be ready\n  public static int Main(string[] args) \n    => BuildAvaloniaApp().StartWithClassicDesktopLifetime(args);\n}\n")),(0,a.kt)("p",null,"Then the main window is created in the ",(0,a.kt)("inlineCode",{parentName:"p"},"Application")," class:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public override void OnFrameworkInitializationCompleted()\n{\n  if (ApplicationLifetime \n                  is IClassicDesktopStyleApplicationLifetime desktop)\n    desktop.MainWindow = new MainWindow();\n  else if (ApplicationLifetime \n                  is ISingleViewApplicationLifetime singleView)\n    singleView.MainView = new MainView();\n  base.OnFrameworkInitializationCompleted();\n}\n")),(0,a.kt)("p",null,"This method is called when the framework has initilized and the ",(0,a.kt)("inlineCode",{parentName:"p"},"ApplicationLifetime")," property contains the chosen lifetime if any."," "),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"If you run the application in design mode (this uses the IDE previewer process), then ",(0,a.kt)("inlineCode",{parentName:"p"},"ApplicationLifetime")," is null.")),(0,a.kt)("h2",{id:"lifetime-interfaces"},"Lifetime Interfaces"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Avalonia UI")," provides a range of interfaces to allow you to choose a level of control that is suitable for your application. These are provided by the ",(0,a.kt)("inlineCode",{parentName:"p"},"BuildAvaloniaApp().Start[Something]")," family of methods."),(0,a.kt)("h3",{id:"icontrolledapplicationlifetime"},"IControlledApplicationLifetime"),(0,a.kt)("p",null,"Provided by:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"StartWithClassicDesktopLifetime")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"StartLinuxFramebuffer"))),(0,a.kt)("p",null,"Allows you to subscribe to ",(0,a.kt)("inlineCode",{parentName:"p"},"Startup")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Exit")," events and permits explicitly shutting down of the application by calling the ",(0,a.kt)("inlineCode",{parentName:"p"},"Shutdown")," method. This interface gives you control of the application's exit procedures."),(0,a.kt)("h3",{id:"iclassicdesktopstyleapplicationlifetime"},"IClassicDesktopStyleApplicationLifetime"),(0,a.kt)("p",null,"Inherits: ",(0,a.kt)("inlineCode",{parentName:"p"},"IControlledApplicationLifetime")),(0,a.kt)("p",null,"Provided by:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"StartWithClassicDesktopLifetime"))),(0,a.kt)("p",null,"Allows you to control your application lifetime in the manner of a Windows Forms or WPF application. This interface provides a way to access the list of the currently opened windows, to set a main window, and has three shutdown modes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"OnLastWindowClose")," - shuts down the application when the last window is closed"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"OnMainWindowClose")," - shuts down the application when the main window is closed (if it has been set)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"OnExplicitShutdown")," - disables automatic shutdown of the application, you need to call the ",(0,a.kt)("inlineCode",{parentName:"li"},"Shutdown")," method in your code.")),(0,a.kt)("h3",{id:"isingleviewapplicationlifetime"},"ISingleViewApplicationLifetime"),(0,a.kt)("p",null,"Provided by:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"StartLinuxFramebuffer")),(0,a.kt)("li",{parentName:"ul"},"mobile platforms"," ")),(0,a.kt)("p",null,"Some platforms do not have a concept of a desktop main window and only allow one view on the device's screen at a time. For these platforms the lifetime allows you to set and change the main view class (",(0,a.kt)("inlineCode",{parentName:"p"},"MainView"),") instead."," "),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"To implement the navigation stack on platforms like this (with a single main view), you can use ",(0,a.kt)("a",{parentName:"p",href:"https://www.reactiveui.net/docs/handbook/routing/"},(0,a.kt)("em",{parentName:"a"},"ReactiveUI")," routing")," or another routing control.")),(0,a.kt)("h2",{id:"manual-lifetime-management"},"Manual Lifetime Management"),(0,a.kt)("p",null,"If you need to, you can take full control of your application's lifetime management. For example on a desktop platform you can pass a delegate to ",(0,a.kt)("inlineCode",{parentName:"p"},"AppMain")," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"BuildAvaloniaApp.Start")," method, and then manage things manually from there:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"class Program\n{\n  // This method is needed for IDE previewer infrastructure\n  public static AppBuilder BuildAvaloniaApp() \n    => AppBuilder.Configure<App>().UsePlatformDetect();\n\n  // The entry point. Things aren't ready yet, so at this point\n  // you shouldn't use any Avalonia types or anything that expects\n  // a SynchronizationContext to be ready\n  public static int Main(string[] args) \n    => BuildAvaloniaApp().Start(AppMain, args);\n\n  // Application entry point. Avalonia is completely initialized.\n  static void AppMain(Application app, string[] args)\n  {\n     // A cancellation token source that will be \n     // used to stop the main loop\n     var cts = new CancellationTokenSource();\n     \n     // Do you startup code here\n     new Window().Show();\n\n     // Start the main loop\n     app.Run(cts.Token);\n  }\n}\n")))}d.isMDXComponent=!0}}]);