"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[47726],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,p=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),c=s(n),u=o,h=c["".concat(p,".").concat(u)]||c[u]||d[u]||l;return n?a.createElement(h,i(i({ref:t},m),{},{components:n})):a.createElement(h,i({ref:t},m))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,i=new Array(l);i[0]=u;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r[c]="string"==typeof e?e:o,i[1]=r;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},18042:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>r,toc:()=>s});var a=n(87462),o=(n(67294),n(3905));const l={id:"data-templates",title:"Data Templates"},i=void 0,r={unversionedId:"templates/data-templates",id:"version-0.10.x/templates/data-templates",title:"Data Templates",description:"Many controls have a Content property, such as ContentControl.Content. Window inherits from ContentControl, so lets use that as an example. You're probably familiar with what happens when you put a control in the Window.Content property - the window displays the control:",source:"@site/versioned_docs/version-0.10.x/templates/data-templates.md",sourceDirName:"templates",slug:"/templates/data-templates",permalink:"/avalonia-docs/docs/templates/data-templates",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/versioned_docs/version-0.10.x/templates/data-templates.md",tags:[],version:"0.10.x",frontMatter:{id:"data-templates",title:"Data Templates"},sidebar:"documentationSidebar",previous:{title:"Data Templates",permalink:"/avalonia-docs/docs/templates/"},next:{title:"Creating Data Templates in Code",permalink:"/avalonia-docs/docs/templates/creating-data-templates-in-code"}},p={},s=[{value:"Evaluation Order",id:"evaluation-order",level:3},{value:"Samples",id:"samples",level:2}],m={toc:s},c="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Many controls have a ",(0,o.kt)("inlineCode",{parentName:"p"},"Content")," property, such as ",(0,o.kt)("a",{parentName:"p",href:"http://reference.avaloniaui.net/api/Avalonia.Controls/ContentControl/4B02A756"},(0,o.kt)("inlineCode",{parentName:"a"},"ContentControl.Content")),". ",(0,o.kt)("inlineCode",{parentName:"p"},"Window")," inherits from ",(0,o.kt)("a",{parentName:"p",href:"../controls/contentcontrol"},(0,o.kt)("inlineCode",{parentName:"a"},"ContentControl")),", so lets use that as an example. You're probably familiar with what happens when you put a control in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Window.Content")," property - the window displays the control:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-markup"},'<Window xmlns="https://github.com/avaloniaui"\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">\n  <Button HorizontalAlignment="Center"\n          VerticalAlignment="Center">\n    Hello World!\n  </Button>\n</Window>\n')),(0,o.kt)("div",{style:{textAlign:"center"}},(0,o.kt)("img",{src:"/img/templates/data-templates/hello-world-button.png",alt:"Hello World button"})),(0,o.kt)("p",null,"Similarly if you put a string as the window content, the window will display the string:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-markup"},'<Window xmlns="https://github.com/avaloniaui"\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">\n  Hello World!\n</Window>\n')),(0,o.kt)("div",{style:{textAlign:"center"}},(0,o.kt)("img",{src:"/img/templates/data-templates/hello-world-string.png",alt:"Hello World string"})),(0,o.kt)("p",null,"But what happens if you try to display an object as the window content?"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"namespace Example\n{\n    public class Student\n    {\n        public Student(string firstName, string lastName)\n        {\n            FirstName = firstName;\n            LastName = lastName;\n        }\n\n        public string FirstName { get; }\n        public string LastName { get; }\n    }\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-markup"},'<Window xmlns="https://github.com/avaloniaui"\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n        xmlns:local="clr-namespace:Example">\n  <local:Student FirstName="Jane" LastName="Deer"/>\n</Window>\n')),(0,o.kt)("div",{style:{textAlign:"center"}},(0,o.kt)("img",{src:"/img/templates/data-templates/student-no-datatemplate.png",alt:"Student without DataTemplate"})),(0,o.kt)("p",null,"Not very helpful. That's because Avalonia doesn't know ",(0,o.kt)("em",{parentName:"p"},"how")," to display an object of type ",(0,o.kt)("inlineCode",{parentName:"p"},"Student")," - because it's not a control it falls back to just calling ",(0,o.kt)("inlineCode",{parentName:"p"},".ToString()")," on the object. We can tell Avalonia how to display non-control objects by defining a data template."),(0,o.kt)("p",null,"The easiest way to do this on ",(0,o.kt)("inlineCode",{parentName:"p"},"Window")," (and any control that inherits from ",(0,o.kt)("inlineCode",{parentName:"p"},"ContentControl"),") is to set the ",(0,o.kt)("a",{parentName:"p",href:"http://reference.avaloniaui.net/api/Avalonia.Controls/ContentControl/7AA9343E"},(0,o.kt)("inlineCode",{parentName:"a"},"ContentTemplate"))," property:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-markup"},'<Window xmlns="https://github.com/avaloniaui"\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n        xmlns:local="clr-namespace:Example">\n  <Window.ContentTemplate>\n    <DataTemplate>\n      <StackPanel>\n        <Grid ColumnDefinitions="Auto,Auto" RowDefinitions="Auto,Auto">\n          <TextBlock Grid.Row="0" Grid.Column="0">First Name:</TextBlock>\n          <TextBlock Grid.Row="0" Grid.Column="1" Text="{Binding FirstName}"/>\n          <TextBlock Grid.Row="1" Grid.Column="0">Last Name:</TextBlock>\n          <TextBlock Grid.Row="1" Grid.Column="1" Text="{Binding LastName}"/>\n        </Grid>\n      </StackPanel>\n    </DataTemplate>\n  </Window.ContentTemplate>\n\n  <local:Student FirstName="Jane" LastName="Deer"/>\n</Window>\n')),(0,o.kt)("div",{style:{textAlign:"center"}},(0,o.kt)("img",{src:"/img/templates/data-templates/student-first-last-name (1) (1) (1) (1) (1).png.png",alt:"Student first and last name"})),(0,o.kt)("p",null,"The data template for the window content doesn't only come from the ",(0,o.kt)("inlineCode",{parentName:"p"},"ContentTemplate")," property. Every control also has a ",(0,o.kt)("inlineCode",{parentName:"p"},"DataTemplates")," collection into which any number of data templates can be placed. If a control doesn't have a template set locally (e.g. in ",(0,o.kt)("inlineCode",{parentName:"p"},"ContentTemplate"),") then it will look in its ",(0,o.kt)("inlineCode",{parentName:"p"},"DataTemplates")," collection for a matching template. If a match isn't found there it will then go on to search its parent's ",(0,o.kt)("inlineCode",{parentName:"p"},"DataTemplates"),", then its grandparent's, and so on until it reaches the ",(0,o.kt)("inlineCode",{parentName:"p"},"Window"),". If it ",(0,o.kt)("em",{parentName:"p"},"still")," hasn't found a match it will then look in ",(0,o.kt)("inlineCode",{parentName:"p"},"App.xaml"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"App.axaml")," for a matching ",(0,o.kt)("inlineCode",{parentName:"p"},"DataTemplate")," and finally when all those options have been exhausted it will simply call ",(0,o.kt)("inlineCode",{parentName:"p"},".ToString()")," on the object."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"DataTemplate"),"s are matched by type: the type that the template matches is specified by setting the ",(0,o.kt)("inlineCode",{parentName:"p"},"DataType")," property on the template."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Remember: Each ",(0,o.kt)("inlineCode",{parentName:"p"},"DataTemplate")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"DataTemplates")," collection should have its ",(0,o.kt)("inlineCode",{parentName:"p"},"DataType")," set to the type of the object that it matches, otherwise the data template won't match anything!")),(0,o.kt)("p",null,"Using the ",(0,o.kt)("inlineCode",{parentName:"p"},"DataTemplates")," collection the previous example could be written as:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-markup"},'<Window xmlns="https://github.com/avaloniaui"\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n        xmlns:local="clr-namespace:Example">\n  <Window.DataTemplates>\n    <DataTemplate DataType="{x:Type local:Student}">\n      <Grid ColumnDefinitions="Auto,Auto" RowDefinitions="Auto,Auto">\n        <TextBlock Grid.Row="0" Grid.Column="0">First Name:</TextBlock>\n        <TextBlock Grid.Row="0" Grid.Column="1" Text="{Binding FirstName}"/>\n        <TextBlock Grid.Row="1" Grid.Column="0">Last Name:</TextBlock>\n        <TextBlock Grid.Row="1" Grid.Column="1" Text="{Binding LastName}"/>\n      </Grid>\n    </DataTemplate>\n  </Window.DataTemplates>\n\n  <local:Student FirstName="Jane" LastName="Deer"/>\n</Window>\n')),(0,o.kt)("p",null,"Using this mechanism, if you want to reuse a ",(0,o.kt)("inlineCode",{parentName:"p"},"DataTemplate")," everywhere in a ",(0,o.kt)("inlineCode",{parentName:"p"},"Window")," you can specify it in ",(0,o.kt)("inlineCode",{parentName:"p"},"Window.DataTemplates"),"; if you want the template to be used throughout the whole application you can specify it in ",(0,o.kt)("inlineCode",{parentName:"p"},"App.xaml"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"App.axaml")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Application.DataTemplates")," collection."),(0,o.kt)("p",null,"Now lets add another view model into the mix:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"namespace Example\n{\n    public class Teacher\n    {\n        public Teacher(string firstName, string lastName)\n        {\n            FirstName = firstName;\n            LastName = lastName;\n        }\n\n        public string FirstName { get; }\n        public string LastName { get; }\n    }\n}\n")),(0,o.kt)("p",null,"Now we can add a separate data template for the ",(0,o.kt)("inlineCode",{parentName:"p"},"Teacher")," type and depending on the type of object in the ",(0,o.kt)("inlineCode",{parentName:"p"},"MainWindowViewModel.Content")," property, the appropriate view will be displayed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-markup"},'<Window xmlns="https://github.com/avaloniaui"\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n        xmlns:local="clr-namespace:Example">\n  <Window.DataTemplates>\n\n    <DataTemplate DataType="{x:Type local:Student}">\n      <Grid ColumnDefinitions="Auto,Auto" RowDefinitions="Auto,Auto">\n        <TextBlock Grid.Row="0" Grid.Column="0">First Name:</TextBlock>\n        <TextBlock Grid.Row="0" Grid.Column="1" Text="{Binding FirstName}"/>\n        <TextBlock Grid.Row="1" Grid.Column="0">Last Name:</TextBlock>\n        <TextBlock Grid.Row="1" Grid.Column="1" Text="{Binding LastName}"/>\n      </Grid>\n    </DataTemplate>\n\n    <DataTemplate DataType="{x:Type local:Teacher}">\n      <Grid ColumnDefinitions="Auto,4,Auto">\n        <TextBlock Grid.Row="0" Grid.Column="0">Professor</TextBlock>\n        <TextBlock Grid.Row="0" Grid.Column="2" Text="{Binding LastName}"/>\n      </Grid>\n    </DataTemplate>\n\n  </Window.DataTemplates>\n\n  <ContentControl Content="{Binding Content}"/>\n</Window>\n')),(0,o.kt)("h3",{id:"evaluation-order"},"Evaluation Order"),(0,o.kt)("p",null,"Data templates in Avalonia can target interfaces and derived classes and so the order of DataTemplates can be important: DataTemplates within the same collection are evaluated in declaration order so you need to place them from most-specific to least-specific as you would in code."),(0,o.kt)("h2",{id:"samples"},"Samples"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/AvaloniaUI/Avalonia.Samples/tree/main/src/Avalonia.Samples/DataTemplates/BasicDataTemplateSample"},"Basic DataTemplate Sample")))}d.isMDXComponent=!0}}]);