"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[37143],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>v});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=l(n),u=i,v=d["".concat(p,".").concat(u)]||d[u]||m[u]||r;return n?a.createElement(v,o(o({ref:t},s),{},{components:n})):a.createElement(v,o({ref:t},s))}));function v(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c[d]="string"==typeof e?e:i,o[1]=c;for(var l=2;l<r;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},36730:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var a=n(87462),i=(n(67294),n(3905));const r={description:"CONCEPTS - ReactiveUI"},o="Reactive View Model",c={unversionedId:"concepts/reactiveui/reactive-view-model",id:"concepts/reactiveui/reactive-view-model",title:"Reactive View Model",description:"CONCEPTS - ReactiveUI",source:"@site/docs/concepts/reactiveui/reactive-view-model.md",sourceDirName:"concepts/reactiveui",slug:"/concepts/reactiveui/reactive-view-model",permalink:"/avalonia-docs/docs/next/concepts/reactiveui/reactive-view-model",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/concepts/reactiveui/reactive-view-model.md",tags:[],version:"current",frontMatter:{description:"CONCEPTS - ReactiveUI"},sidebar:"documentationSidebar",previous:{title:"ReactiveUI",permalink:"/avalonia-docs/docs/next/concepts/reactiveui/"},next:{title:"Command Update",permalink:"/avalonia-docs/docs/next/concepts/reactiveui/command-update"}},p={},l=[{value:"Notify the View of Changes",id:"notify-the-view-of-changes",level:2},{value:"Update the View Model from Input",id:"update-the-view-model-from-input",level:2}],s={toc:l},d="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"reactive-view-model"},"Reactive View Model"),(0,i.kt)("p",null,"This page describes how you can use the ",(0,i.kt)("em",{parentName:"p"},"ReactiveUI")," ",(0,i.kt)("inlineCode",{parentName:"p"},"ReactiveObject")," as the basis of your view model to implement MVVM binding with ",(0,i.kt)("em",{parentName:"p"},"Avalonia UI"),"."," "),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"ReactiveUI")," provides the ",(0,i.kt)("inlineCode",{parentName:"p"},"ReactiveObject")," as a base class for view models. It implements a notification of property changes and observables to monitor object changes."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"For the detailed ",(0,i.kt)("em",{parentName:"p"},"ReactiveUI")," documentation for ",(0,i.kt)("inlineCode",{parentName:"p"},"ReactiveObject"),", see ",(0,i.kt)("a",{parentName:"p",href:"https://www.reactiveui.net/api/reactiveui/reactiveobject/"},"here"),".")),(0,i.kt)("p",null," ","Once you have installed and configured ",(0,i.kt)("em",{parentName:"p"},"ReactiveUI"),", you can base your view models on the class:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public class ViewModelBase : ReactiveObject\n{\n}\n")),(0,i.kt)("img",{src:"/img/gitbook-import/assets/image (4) (2).png",alt:""}),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"If you have used the Avalonia MVVM Application solution template, then you will find this base class already added to the project /ViewModels folder.")),(0,i.kt)("p",null,"For example, you can implement a simple view model like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public class MyViewModel : ViewModelBase\n{\n   private string _description = string.Empty;\n   public string Description\n   {\n      get => _description;\n      set => this.RaiseAndSetIfChanged(ref _description, value);\n   }\n}\n")),(0,i.kt)("h2",{id:"notify-the-view-of-changes"},"Notify the View of Changes"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Avalonia UI")," uses the underlying ",(0,i.kt)("inlineCode",{parentName:"p"},"ReactiveObject")," to ",(0,i.kt)("strong",{parentName:"p"},"Notify")," changes in the view model back to the view using any bindings defined in the XAML. For example, if you are binding the ",(0,i.kt)("em",{parentName:"p"},"Avalonia UI")," text input control like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<TextBox AcceptsReturn="True"\n         Text="{Binding Description}"\n         Watermark="Enter a description"/>\n')),(0,i.kt)("p",null,"Any change to the view model description property is achieved using the the ",(0,i.kt)("inlineCode",{parentName:"p"},"set")," accessor and a change is raised causing ",(0,i.kt)("em",{parentName:"p"},"Avalonia UI")," to display the new value on the UI."),(0,i.kt)("h2",{id:"update-the-view-model-from-input"},"Update the View Model from Input"),(0,i.kt)("p",null,"When ",(0,i.kt)("em",{parentName:"p"},"Avalonia UI")," uses the binding to ",(0,i.kt)("strong",{parentName:"p"},"Update")," the view model, the ",(0,i.kt)("inlineCode",{parentName:"p"},"set")," accessor ensures that any parts of the view model that depend on the description property can also react to the change if necessary."),(0,i.kt)("p",null,"On the next page, you will learn how a reactive command acts as a special case of the view model update."))}m.isMDXComponent=!0}}]);