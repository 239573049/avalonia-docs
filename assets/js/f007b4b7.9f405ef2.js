"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[76875],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,d=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),m=s(n),h=i,u=m["".concat(d,".").concat(h)]||m[h]||c[h]||o;return n?a.createElement(u,l(l({ref:t},p),{},{components:n})):a.createElement(u,l({ref:t},p))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=h;var r={};for(var d in t)hasOwnProperty.call(t,d)&&(r[d]=t[d]);r.originalType=e,r[m]="string"==typeof e?e:i,l[1]=r;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},90882:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>s});var a=n(87462),i=(n(67294),n(3905));const o={id:"adding-new-items",title:"Adding new Items"},l=void 0,r={unversionedId:"tutorials/todo-list-app/adding-new-items",id:"version-0.10.x/tutorials/todo-list-app/adding-new-items",title:"Adding new Items",description:'When we originally created the TodoListView we added an "Add an item" button. It\'s time now to make that button do something. When the button is clicked we want to replace the list of items with a new view which will allow the user to enter the description of a new item.',source:"@site/versioned_docs/version-0.10.x/tutorials/todo-list-app/adding-new-items.md",sourceDirName:"tutorials/todo-list-app",slug:"/tutorials/todo-list-app/adding-new-items",permalink:"/avalonia-docs/docs/tutorials/todo-list-app/adding-new-items",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/versioned_docs/version-0.10.x/tutorials/todo-list-app/adding-new-items.md",tags:[],version:"0.10.x",frontMatter:{id:"adding-new-items",title:"Adding new Items"},sidebar:"documentationSidebar",previous:{title:"Locating Views",permalink:"/avalonia-docs/docs/tutorials/todo-list-app/locating-views"},next:{title:"Music Store App",permalink:"/avalonia-docs/docs/tutorials/music-store-app/"}},d={},s=[{value:"Create the view",id:"create-the-view",level:3},{value:"Create the view model",id:"create-the-view-model",level:3},{value:"Swap out the list view model",id:"swap-out-the-list-view-model",level:3},{value:"Run the application",id:"run-the-application",level:3},{value:"Implement the OK and Cancel commands",id:"implement-the-ok-and-cancel-commands",level:3},{value:"Bind the OK and Cancel buttons",id:"bind-the-ok-and-cancel-buttons",level:3},{value:"Handle the OK and Cancel button",id:"handle-the-ok-and-cancel-button",level:3},{value:"Run the application",id:"run-the-application-1",level:3}],p={toc:s},m="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"When we originally created the ",(0,i.kt)("inlineCode",{parentName:"p"},"TodoListView"),' we added an "Add an item" button. It\'s time now to make that button do something. When the button is clicked we want to replace the list of items with a new view which will allow the user to enter the description of a new item.'),(0,i.kt)("h3",{id:"create-the-view"},"Create the view"),(0,i.kt)("p",null,"We start by creating the view ","(","see ",(0,i.kt)("a",{parentName:"p",href:"../todo-list-app/creating-a-view#create-the-usercontrol"},"here")," for a refresher on how to create a ",(0,i.kt)("inlineCode",{parentName:"p"},"UserControl")," using a template",")",":"),(0,i.kt)("p",null,"Views/AddItemView.axaml"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markup"},'<UserControl xmlns="https://github.com/avaloniaui"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"\n             mc:Ignorable="d" d:DesignWidth="200" d:DesignHeight="300"\n             x:Class="Todo.Views.AddItemView">\n  <DockPanel>\n    <Button DockPanel.Dock="Bottom">Cancel</Button>\n    <Button DockPanel.Dock="Bottom">OK</Button>\n    <TextBox AcceptsReturn="True"\n             Text="{Binding Description}"\n             Watermark="Enter your TODO"/>\n  </DockPanel>\n</UserControl>\n')),(0,i.kt)("p",null,"This gives us a view which looks like this:"),(0,i.kt)("div",{style:{textAlign:"center"}},(0,i.kt)("img",{src:"/img/tutorials/todo-list-app/adding-new-items/adding-new-items-view.png",alt:"The view"})),(0,i.kt)("p",null,"The only new thing here is the ",(0,i.kt)("inlineCode",{parentName:"p"},"<TextBox>")," control which is a control that allows a user to input text. We set three properties on it:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"AcceptsReturn")," creates a multi-line ",(0,i.kt)("inlineCode",{parentName:"li"},"TextBox")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Text")," binds the text that is displayed in the ",(0,i.kt)("inlineCode",{parentName:"li"},"TextBox")," to the ",(0,i.kt)("inlineCode",{parentName:"li"},"Description")," property on the view model"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Watermark")," causes a placeholder to be displayed when the ",(0,i.kt)("inlineCode",{parentName:"li"},"TextBox")," is empty")),(0,i.kt)("h3",{id:"create-the-view-model"},"Create the view model"),(0,i.kt)("p",null,"Our view model is going to start out ",(0,i.kt)("em",{parentName:"p"},"extremely")," simple. We're just going to provide the ",(0,i.kt)("inlineCode",{parentName:"p"},"Description")," property that the ",(0,i.kt)("inlineCode",{parentName:"p"},"TextBox")," is bound to for starters. We'll add to this as we go along."),(0,i.kt)("p",null,"ViewModels\\AddItemViewModel.cs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"namespace Todo.ViewModels\n{\n    class AddItemViewModel : ViewModelBase\n    {\n        public string Description { get; set; }\n    }\n}\n")),(0,i.kt)("h3",{id:"swap-out-the-list-view-model"},"Swap out the list view model"),(0,i.kt)("p",null,'When we click the "Add an item" button, we want to stop showing the ',(0,i.kt)("inlineCode",{parentName:"p"},"TodoListView")," in the window and show the ",(0,i.kt)("inlineCode",{parentName:"p"},"AddItemView"),". We can alter the ",(0,i.kt)("inlineCode",{parentName:"p"},"MainWindowViewModel")," to let us do this:"),(0,i.kt)("p",null,"ViewModels/MainWindowViewModel.cs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"using ReactiveUI;\nusing Todo.Services;\n\nnamespace Todo.ViewModels\n{\n    class MainWindowViewModel : ViewModelBase\n    {\n        ViewModelBase content;\n\n        public MainWindowViewModel(Database db)\n        {\n            Content = List = new TodoListViewModel(db.GetItems());\n        }\n\n        public ViewModelBase Content\n        {\n            get => content;\n            private set => this.RaiseAndSetIfChanged(ref content, value);\n        }\n\n        public TodoListViewModel List { get; }\n\n        public void AddItem()\n        {\n            Content = new AddItemViewModel();\n        }\n    }\n}\n\n")),(0,i.kt)("p",null,"Here we add a ",(0,i.kt)("inlineCode",{parentName:"p"},"Content")," property which is initially set to our list view model. When the ",(0,i.kt)("inlineCode",{parentName:"p"},"AddItem()")," method is called, we assign an ",(0,i.kt)("inlineCode",{parentName:"p"},"AddItemViewModel")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Content")," property."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Content")," property setter calls ",(0,i.kt)("inlineCode",{parentName:"p"},"RaiseAndSetIfChanged")," which will cause ",(0,i.kt)("a",{parentName:"p",href:"../../data-binding/change-notifications"},"a change notification")," to be fired each time the property changes value. Avalonia's binding system needs change notifications in order to know when to update the user-interface in response to a property change."),(0,i.kt)("p",null,"We now want to bind our ",(0,i.kt)("inlineCode",{parentName:"p"},"Window.Content")," property to this new ",(0,i.kt)("inlineCode",{parentName:"p"},"Content")," property instead of the ",(0,i.kt)("inlineCode",{parentName:"p"},"List")," property that it is currently bound to:"),(0,i.kt)("p",null,"Views/MainWindow.axaml"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markup"},'<Window xmlns="https://github.com/avaloniaui"\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n        x:Class="Todo.Views.MainWindow"\n        Icon="/Assets/avalonia-logo.ico"\n        Width="200" Height="300"\n        Title="Avalonia Todo"\n        Content="{Binding Content}">\n</Window>\n')),(0,i.kt)("p",null,'And finally we need to make the "Add an item" button call ',(0,i.kt)("inlineCode",{parentName:"p"},"MainWindowViewModel.AddItem()"),"."),(0,i.kt)("p",null,"Views/TodoListView.axaml"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markup"},'<UserControl xmlns="https://github.com/avaloniaui"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"\n             mc:Ignorable="d" d:DesignWidth="200" d:DesignHeight="300"\n             x:Class="Todo.Views.TodoListView">\n  <DockPanel>\n    <Button DockPanel.Dock="Bottom"\n            Command="{Binding $parent[Window].DataContext.AddItem}">\n      Add an item\n    </Button>\n    <ItemsControl Items="{Binding Items}">\n      <ItemsControl.ItemTemplate>\n        <DataTemplate>\n          <CheckBox Margin="4"\n                    IsChecked="{Binding IsChecked}"\n                    Content="{Binding Description}"/>\n        </DataTemplate>\n      </ItemsControl.ItemTemplate>\n    </ItemsControl>\n  </DockPanel>\n</UserControl>\n')),(0,i.kt)("p",null,"The binding we've added to ",(0,i.kt)("inlineCode",{parentName:"p"},"<Button>")," is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markup"},'Command="{Binding $parent[Window].DataContext.AddItem}"\n')),(0,i.kt)("p",null,"There are a few parts to this:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"Button.Command")," property describes a command to be called when the button is clicked"),(0,i.kt)("li",{parentName:"ul"},"We're binding it to ",(0,i.kt)("inlineCode",{parentName:"li"},"$parent[Window].DataContext.AddItem"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$parent[Window]")," means find an ancestor control of type ",(0,i.kt)("inlineCode",{parentName:"li"},"Window")),(0,i.kt)("li",{parentName:"ul"},"And get its ",(0,i.kt)("inlineCode",{parentName:"li"},"DataContext")," ","(","i.e. a ",(0,i.kt)("inlineCode",{parentName:"li"},"MainWindowViewModel")," in this case",")"),(0,i.kt)("li",{parentName:"ul"},"And bind to the ",(0,i.kt)("inlineCode",{parentName:"li"},"AddItem")," method on that view model")))),(0,i.kt)("p",null,"This will cause the ",(0,i.kt)("inlineCode",{parentName:"p"},"MainWindowViewModel.AddItem()")," method to be invoked when the button is clicked."),(0,i.kt)("p",null,"If you're familiar with WPF or UWP you may think it strange that we're binding ",(0,i.kt)("inlineCode",{parentName:"p"},"Button.Command")," to a method. This is a convenience feature of Avalonia which means that you don't have to create an ",(0,i.kt)("inlineCode",{parentName:"p"},"ICommand")," for simple commands that are always enabled."),(0,i.kt)("h3",{id:"run-the-application"},"Run the application"),(0,i.kt)("p",null,'If you now run the application and click the "Add an item" button you should see the new view appear.'),(0,i.kt)("div",{style:{textAlign:"center"}},(0,i.kt)("img",{src:"/img/tutorials/todo-list-app/adding-new-items/adding-new-item-run.gif",alt:"The running application"})),(0,i.kt)("p",null,'Now we have the "Add new item" view appearing we need to make it work. In particular we need to enable/disable the OK button depending on whether the user has typed anything in the ',(0,i.kt)("inlineCode",{parentName:"p"},"Description"),"."),(0,i.kt)("h3",{id:"implement-the-ok-and-cancel-commands"},"Implement the OK and Cancel commands"),(0,i.kt)("p",null,"In the last section we bound a ",(0,i.kt)("inlineCode",{parentName:"p"},"Button.Command")," to a method on the view model, but if we want to be able to control the enabled state of the button we need to bind to an ",(0,i.kt)("a",{parentName:"p",href:"../../data-binding/binding-to-commands"},(0,i.kt)("inlineCode",{parentName:"a"},"ICommand")),". Again we're going to take advantage of ReactiveUI and use ",(0,i.kt)("a",{parentName:"p",href:"https://reactiveui.net/docs/handbook/commands/"},(0,i.kt)("inlineCode",{parentName:"a"},"ReactiveCommand")),"."),(0,i.kt)("p",null,"ViewModels\\AddItemViewModel.cs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"using System.Reactive;\nusing ReactiveUI;\nusing Todo.Models;\n\nnamespace Todo.ViewModels\n{\n    class AddItemViewModel : ViewModelBase\n    {\n        string description;\n\n        public AddItemViewModel()\n        {\n            var okEnabled = this.WhenAnyValue(\n                x => x.Description,\n                x => !string.IsNullOrWhiteSpace(x));\n\n            Ok = ReactiveCommand.Create(\n                () => new TodoItem { Description = Description }, \n                okEnabled);\n            Cancel = ReactiveCommand.Create(() => { });\n        }\n\n        public string Description\n        {\n            get => description;\n            set => this.RaiseAndSetIfChanged(ref description, value);\n        }\n\n        public ReactiveCommand<Unit, TodoItem> Ok { get; }\n        public ReactiveCommand<Unit, Unit> Cancel { get; }\n    }\n}\n")),(0,i.kt)("p",null,"First we modify the ",(0,i.kt)("inlineCode",{parentName:"p"},"Description")," property to raise ",(0,i.kt)("a",{parentName:"p",href:"../../data-binding/change-notifications"},"change notifications"),". We ",(0,i.kt)("a",{parentName:"p",href:"adding-new-items#swap-out-the-list-view-model"},"saw this pattern before")," in the main window view model. In this case though, we're implementing change notifications for ",(0,i.kt)("inlineCode",{parentName:"p"},"ReactiveUI")," rather than for Avalonia specifically:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"var okEnabled = this.WhenAnyValue(\n    x => x.Description,\n    x => !string.IsNullOrWhiteSpace(x));\n")),(0,i.kt)("p",null,"Now that ",(0,i.kt)("inlineCode",{parentName:"p"},"Description")," has change notifications enabled we can use ",(0,i.kt)("a",{parentName:"p",href:"https://reactiveui.net/docs/handbook/when-any/"},(0,i.kt)("inlineCode",{parentName:"a"},"WhenAnyValue"))," to convert the property into a stream of values in the form of an ",(0,i.kt)("a",{parentName:"p",href:"http://introtorx.com/Content/v1.0.10621.0/02_KeyTypes.html#KeyTypes"},(0,i.kt)("inlineCode",{parentName:"a"},"IObservable")),"."),(0,i.kt)("p",null,"This above code can be read as:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For the initial value of ",(0,i.kt)("inlineCode",{parentName:"li"},"Description"),", and for subsequent changes"),(0,i.kt)("li",{parentName:"ul"},"Select the inverse of the result of invoking ",(0,i.kt)("inlineCode",{parentName:"li"},"string.IsNullOrWhiteSpace()")," with the value")),(0,i.kt)("p",null,"This means that ",(0,i.kt)("inlineCode",{parentName:"p"},"okEnabled")," represents a stream of ",(0,i.kt)("inlineCode",{parentName:"p"},"bool")," values which will produce ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," when ",(0,i.kt)("inlineCode",{parentName:"p"},"Description")," is a non-empty string and ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," when it is an empty string. This is exactly how we want the ",(0,i.kt)("inlineCode",{parentName:"p"},"OK")," button to be enabled."),(0,i.kt)("p",null,"We then create a ",(0,i.kt)("inlineCode",{parentName:"p"},"ReactiveCommand")," and assign it to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Ok")," property:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"Ok = ReactiveCommand.Create(\n    () => new TodoItem { Description = Description }, \n    okEnabled);\n")),(0,i.kt)("p",null,"The second parameter to ",(0,i.kt)("inlineCode",{parentName:"p"},"ReactiveCommand.Create")," controls the enabled state of the command, and so the observable we just created is passed there."),(0,i.kt)("p",null,"The first parameter is a lambda that is run when the command is executed. Here we simply create an instance of our model ",(0,i.kt)("inlineCode",{parentName:"p"},"TodoItem")," with the description entered by the user."),(0,i.kt)("p",null,'We also create a command for the "Cancel" button:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"Cancel = ReactiveCommand.Create(() => { });\n")),(0,i.kt)("p",null,'The cancel command is always enabled so we don\'t pass an observable to control its state, we just pass an "execute" lambda which in this case does nothing.'),(0,i.kt)("h3",{id:"bind-the-ok-and-cancel-buttons"},"Bind the OK and Cancel buttons"),(0,i.kt)("p",null,"We can now bind the OK and Cancel buttons in the view to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Ok")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Cancel")," commands we just created on the view model:"),(0,i.kt)("p",null,"Views/AddItemView.axaml"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markup"},'<UserControl xmlns="https://github.com/avaloniaui"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"\n             mc:Ignorable="d" d:DesignWidth="200" d:DesignHeight="300"\n             x:Class="Todo.Views.AddItemView">\n  <DockPanel>\n    <Button DockPanel.Dock="Bottom" Command="{Binding Cancel}">Cancel</Button>\n    <Button DockPanel.Dock="Bottom" Command="{Binding Ok}">OK</Button>\n    <TextBox AcceptsReturn="False"\n             Text="{Binding Description}"\n             Watermark="Enter your TODO"/>\n  </DockPanel>\n</UserControl>\n\n')),(0,i.kt)("p",null,'If you run the application and go to the "Add Item" view you should now see that the OK button is only enabled when text has been entered in the description ',(0,i.kt)("inlineCode",{parentName:"p"},"TextBox"),"."),(0,i.kt)("h3",{id:"handle-the-ok-and-cancel-button"},"Handle the OK and Cancel button"),(0,i.kt)("p",null,"We now need to react to the OK or Cancel buttons being pressed and re-show the list. If OK was pressed we also need to add the new item to the list. We'll implement this functionality in ",(0,i.kt)("inlineCode",{parentName:"p"},"MainWindowViewModel"),":"),(0,i.kt)("p",null,"ViewModels/MainWindowViewModel.cs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"using System;\nusing System.Reactive.Linq;\nusing ReactiveUI;\nusing Todo.Models;\nusing Todo.Services;\n\nnamespace Todo.ViewModels\n{\n    class MainWindowViewModel : ViewModelBase\n    {\n        ViewModelBase content;\n\n        public MainWindowViewModel(Database db)\n        {\n            Content = List = new TodoListViewModel(db.GetItems());\n        }\n\n        public ViewModelBase Content\n        {\n            get => content;\n            private set => this.RaiseAndSetIfChanged(ref content, value);\n        }\n\n        public TodoListViewModel List { get; }\n\n        public void AddItem()\n        {\n            var vm = new AddItemViewModel();\n\n            Observable.Merge(\n                vm.Ok,\n                vm.Cancel.Select(_ => (TodoItem)null))\n                .Take(1)\n                .Subscribe(model =>\n                {\n                    if (model != null)\n                    {\n                        List.Items.Add(model);\n                    }\n\n                    Content = List;\n                });\n\n            Content = vm;\n        }\n    }\n}\n")),(0,i.kt)("p",null,"There are a few parts to the added code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"Observable.Merge(vm.Ok, vm.Cancel.Select(_ => (TodoItem)null))\n")),(0,i.kt)("p",null,"This code takes advantage of the fact that ",(0,i.kt)("inlineCode",{parentName:"p"},"ReactiveCommand")," is itself an observable which produces a value each time the command is executed. You'll notice that when we defined the commands they had slightly different declarations:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public ReactiveCommand<Unit, TodoItem> Ok { get; }\npublic ReactiveCommand<Unit, Unit> Cancel { get; }\n")),(0,i.kt)("p",null,"The second type parameter to ",(0,i.kt)("inlineCode",{parentName:"p"},"ReactiveCommand")," specifies the type of result it produces when the command is executed. ",(0,i.kt)("inlineCode",{parentName:"p"},"Ok")," produces a ",(0,i.kt)("inlineCode",{parentName:"p"},"TodoItem")," while ",(0,i.kt)("inlineCode",{parentName:"p"},"Cancel")," produces a ",(0,i.kt)("inlineCode",{parentName:"p"},"Unit"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"Unit")," is the reactive version of ",(0,i.kt)("inlineCode",{parentName:"p"},"void"),". It means the command produces no value."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://reactivex.io/documentation/operators/merge.html"},(0,i.kt)("inlineCode",{parentName:"a"},"Observable.Merge"))," combines the output from any number of obervables and merges them into a single observable stream. Because they're being merged into a single stream, they need to be of the same type. For this reason we call ",(0,i.kt)("inlineCode",{parentName:"p"},"vm.Cancel.Select(_ => (TodoItem)null)"),": this has the effect that every time the ",(0,i.kt)("inlineCode",{parentName:"p"},"Cancel")," observable produces a value we select a ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," ",(0,i.kt)("inlineCode",{parentName:"p"},"TodoItem"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},".Take(1)\n")),(0,i.kt)("p",null,"We're only interested in the first click of either the OK or Cancel button; once one of the buttons are clicked we don't need to listen for any more clicks. ",(0,i.kt)("a",{parentName:"p",href:"https://reactivex.io/documentation/operators/take.html"},(0,i.kt)("inlineCode",{parentName:"a"},"Take(1)")),' means "just take the first value produced by the observable sequence".'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},".Subscribe(model =>\n{\n    if (model != null)\n    {\n        List.Items.Add(model);\n    }\n\n    Content = List;\n});\n")),(0,i.kt)("p",null,"Finally we subscribe to the result of the observable sequence. If the command resulted in a ",(0,i.kt)("inlineCode",{parentName:"p"},"model")," being produced ","(","i.e. OK was clicked",")"," then add this model to the list. We then set ",(0,i.kt)("inlineCode",{parentName:"p"},"Content")," back to ",(0,i.kt)("inlineCode",{parentName:"p"},"List"),' in order to display the list in the window and hide the "AddItemView".'),(0,i.kt)("h3",{id:"run-the-application-1"},"Run the application"),(0,i.kt)("div",{style:{textAlign:"center"}},(0,i.kt)("img",{src:"/img/tutorials/todo-list-app/adding-new-items/adding-new-items-2-run.gif",alt:"The running application"})))}c.isMDXComponent=!0}}]);