"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[1978],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>k});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var m=a.createContext({}),d=function(e){var n=a.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=d(e.components);return a.createElement(m.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},s=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,m=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(t),s=o,k=u["".concat(m,".").concat(s)]||u[s]||p[s]||r;return t?a.createElement(k,i(i({ref:n},c),{},{components:t})):a.createElement(k,i({ref:n},c))}));function k(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=s;var l={};for(var m in n)hasOwnProperty.call(n,m)&&(l[m]=n[m]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var d=2;d<r;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}s.displayName="MDXCreateElement"},74543:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var a=t(87462),o=(t(67294),t(3905));const r={id:"menu",title:"Menu"},i=void 0,l={unversionedId:"controls/menu",id:"version-0.10.x/controls/menu",title:"Menu",description:"The Menu control adds a top-level menu to an application. A Menu is usually placed in a DockPanel in a Window, docked to the top of the window:",source:"@site/versioned_docs/version-0.10.x/controls/menu.md",sourceDirName:"controls",slug:"/controls/menu",permalink:"/avalonia-docs/docs/controls/menu",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/versioned_docs/version-0.10.x/controls/menu.md",tags:[],version:"0.10.x",frontMatter:{id:"menu",title:"Menu"},sidebar:"documentationSidebar",previous:{title:"MaskedTextBox",permalink:"/avalonia-docs/docs/controls/maskedtextbox"},next:{title:"NativeMenu",permalink:"/avalonia-docs/docs/controls/nativemenu"}},m={},d=[{value:"Accelerator Keys",id:"accelerator-keys",level:2},{value:"Menu Commands",id:"menu-commands",level:2},{value:"Menu Icons",id:"menu-icons",level:2},{value:"Checkboxes",id:"checkboxes",level:2},{value:"Dynamically Creating Menus",id:"dynamically-creating-menus",level:2},{value:"Reference",id:"reference",level:2},{value:"Source code",id:"source-code",level:2}],c={toc:d},u="wrapper";function p(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Menu")," control adds a top-level menu to an application. A ",(0,o.kt)("inlineCode",{parentName:"p"},"Menu")," is usually placed in a ",(0,o.kt)("inlineCode",{parentName:"p"},"DockPanel")," in a ",(0,o.kt)("inlineCode",{parentName:"p"},"Window"),", docked to the top of the window:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-markup"},'<Window xmlns="https://github.com/avaloniaui"\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">\n    <DockPanel>\n        <Menu DockPanel.Dock="Top">\n            <MenuItem Header="_File">\n                <MenuItem Header="_Open..."/>\n                <Separator/>\n                <MenuItem Header="_Exit"/>\n            </MenuItem>\n            <MenuItem Header="_Edit">\n                <MenuItem Header="Copy"/>\n                <MenuItem Header="Paste"/>\n            </MenuItem>\n        </Menu>\n    </DockPanel>\n</Window>\n')),(0,o.kt)("p",null,"A menu will usually contain a set of nested ",(0,o.kt)("inlineCode",{parentName:"p"},"MenuItem"),"s. The first level of ",(0,o.kt)("inlineCode",{parentName:"p"},"MenuItem"),"s represent the items that will be displayed horizontally along the menu. The second level of ",(0,o.kt)("inlineCode",{parentName:"p"},"MenuItem"),"s represent the menu items that will be dropped down from the top-level and subsequent nested ",(0,o.kt)("inlineCode",{parentName:"p"},"MenuItem"),"s represent sub-menus."),(0,o.kt)("p",null,"The text of the ",(0,o.kt)("inlineCode",{parentName:"p"},"MenuItem")," is displayed by the ",(0,o.kt)("inlineCode",{parentName:"p"},"Header")," property; the inner content of the ",(0,o.kt)("inlineCode",{parentName:"p"},"MenuItem")," is where the sub-items are placed."),(0,o.kt)("p",null,"Separators are added by including a ",(0,o.kt)("inlineCode",{parentName:"p"},"Separator")," control or a ",(0,o.kt)("inlineCode",{parentName:"p"},"MenuItem")," with a header of ",(0,o.kt)("inlineCode",{parentName:"p"},'"-"'),"."),(0,o.kt)("h2",{id:"accelerator-keys"},"Accelerator Keys"),(0,o.kt)("p",null,"An accelerator key is a key on your keyboard that you can press to quickly access a menu. It is also sometimes called a hot key, access key or mnemonic."),(0,o.kt)("p",null,"If you will press Alt with the example above you will see that some letters are underlined. You can use a combination of Alt + underlined letter to navigate within a menu. In Avalonia to identify the accelerator key, you will need to use ",(0,o.kt)("inlineCode",{parentName:"p"},"_")," next character to this character would be an accelerator key."),(0,o.kt)("h2",{id:"menu-commands"},"Menu Commands"),(0,o.kt)("p",null,"Like ",(0,o.kt)("inlineCode",{parentName:"p"},"Button"),", commands can be ",(0,o.kt)("a",{parentName:"p",href:"../data-binding/binding-to-commands"},"bound")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"MenuItem"),"s. The command will be executed when the menu item is clicked or selected with the keyboard:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-markup"},'<Menu>\n    <MenuItem Header="_File">\n        <MenuItem Header="_Open..." Command="{Binding OpenCommand}"/>\n    </MenuItem>\n</Menu>\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"See the ",(0,o.kt)("a",{parentName:"p",href:"../data-binding/binding-to-commands"},"Binding to Commands")," section for more information on binding to commands.")),(0,o.kt)("h2",{id:"menu-icons"},"Menu Icons"),(0,o.kt)("p",null,"A menu icon can be displayed by placing an ",(0,o.kt)("inlineCode",{parentName:"p"},"Image")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Icon")," property:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-markup"},'    <MenuItem Header="_Open...">\n        <MenuItem.Icon>\n            <Image Source="resm:MyApp.Assets.Open.png"/>\n        </MenuItem.Icon>\n    </MenuItem>\n')),(0,o.kt)("h2",{id:"checkboxes"},"Checkboxes"),(0,o.kt)("p",null,"Similarly, a ",(0,o.kt)("inlineCode",{parentName:"p"},"CheckBox")," can be displayed in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Icon")," property to make the ",(0,o.kt)("inlineCode",{parentName:"p"},"MenuItem")," checkable:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-markup"},'    <MenuItem Header="_Open...">\n        <MenuItem.Icon>\n            <CheckBox BorderThickness="0"\n                      IsHitTestVisible="False"\n                      Command="{Binding ToggleCommand}">\n                Toggle _Me\n            </CheckBox>\n        </MenuItem.Icon>\n    </MenuItem>\n')),(0,o.kt)("h2",{id:"dynamically-creating-menus"},"Dynamically Creating Menus"),(0,o.kt)("p",null,"Menus can also be dynamically created using bindings and ",(0,o.kt)("a",{parentName:"p",href:"../wpf-developer-tips/datatemplates"},(0,o.kt)("inlineCode",{parentName:"a"},"DataTemplate")),"s. To do this, you will usually create a view model to represent your ",(0,o.kt)("inlineCode",{parentName:"p"},"Window")," with a set of commands relating to the menu commands:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'public class MainWindowViewModel\n{\n    public MainWindowViewModel()\n    {\n        OpenCommand = ReactiveCommand.CreateFromTask(Open);\n        SaveCommand = ReactiveCommand.Create(Save);\n        OpenRecentCommand = ReactiveCommand.Create<string>(OpenRecent);\n    }\n\n    public IReadOnlyList<MenuItemViewModel> MenuItems { get; set; }\n    public ReactiveCommand<Unit, Unit> OpenCommand { get; }\n    public ReactiveCommand<Unit, Unit> SaveCommand { get; }\n    public ReactiveCommand<string, Unit> OpenRecentCommand { get; }\n\n    public async Task Open()\n    {\n        var dialog = new OpenFileDialog();\n        var result = await dialog.ShowAsync();\n\n        if (result != null)\n        {\n            foreach (var path in result)\n            {\n                System.Diagnostics.Debug.WriteLine($"Opened: {path}");\n            }\n        }\n    }\n\n    public void Save()\n    {\n        System.Diagnostics.Debug.WriteLine("Save");\n    }\n\n    public void OpenRecent(string path)\n    {\n        System.Diagnostics.Debug.WriteLine($"Open recent: {path}");\n    }\n}\n')),(0,o.kt)("p",null,"And a view model for the menu items"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"public class MenuItemViewModel\n{\n    public string Header { get; set; }\n    public ICommand Command { get; set; }\n    public object CommandParameter { get; set; }\n    public IList<MenuItemViewModel> Items { get; set; }\n}\n")),(0,o.kt)("p",null,"Next, you can create your menu structure using the view models. The following code when placed in a ",(0,o.kt)("inlineCode",{parentName:"p"},"Window")," constructor will create a basic menu structure and assign it to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Window"),"'s ",(0,o.kt)("inlineCode",{parentName:"p"},"DataContext"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'public MainWindow()\n{\n    InitializeComponent();\n\n    var vm = new MainWindowViewModel();\n\n    vm.MenuItems = new[]\n    {\n        new MenuItemViewModel\n        {\n            Header = "_File",\n            Items = new[]\n            {\n                new MenuItemViewModel { Header = "_Open...", Command = vm.OpenCommand },\n                new MenuItemViewModel { Header = "Save", Command = vm.SaveCommand },\n                new MenuItemViewModel { Header = "-" },\n                new MenuItemViewModel\n                {\n                    Header = "Recent",\n                    Items = new[]\n                    {\n                        new MenuItemViewModel\n                        {\n                            Header = "File1.txt",\n                            Command = vm.OpenRecentCommand,\n                            CommandParameter = @"c:\\foo\\File1.txt"\n                        },\n                        new MenuItemViewModel\n                        {\n                            Header = "File2.txt",\n                            Command = vm.OpenRecentCommand,\n                            CommandParameter = @"c:\\foo\\File2.txt"\n                        },\n                    }\n                },\n            }\n        },\n        new MenuItemViewModel\n        {\n            Header = "_Edit",\n            Items = new[]\n            {\n                new MenuItemViewModel { Header = "_Copy" },\n                new MenuItemViewModel { Header = "_Paste" },\n            }\n        }\n    };\n\n    DataContext = vm;\n}\n')),(0,o.kt)("p",null,"Finally assign the bindings to the view model in a ",(0,o.kt)("inlineCode",{parentName:"p"},"Style")," within the menu:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-markup"},'<Menu Items="{Binding MenuItems}">\n    <Menu.Styles>\n        <Style Selector="MenuItem">\n            <Setter Property="Header" Value="{Binding Header}"/>\n            <Setter Property="Items" Value="{Binding Items}"/>\n            <Setter Property="Command" Value="{Binding Command}"/>\n            <Setter Property="CommandParameter" Value="{Binding CommandParameter}"/>\n        </Style>\n    </Menu.Styles>\n</Menu>\n')),(0,o.kt)("h2",{id:"reference"},"Reference"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"http://reference.avaloniaui.net/api/Avalonia.Controls/Menu/"},"Menu")),(0,o.kt)("h2",{id:"source-code"},"Source code"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/AvaloniaUI/Avalonia/blob/master/src/Avalonia.Controls/Menu.cs"},"Menu.cs")))}p.isMDXComponent=!0}}]);