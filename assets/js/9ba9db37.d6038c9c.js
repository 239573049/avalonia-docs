"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[22964],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=s(n),m=o,g=c["".concat(p,".").concat(m)]||c[m]||u[m]||r;return n?a.createElement(g,l(l({ref:t},d),{},{components:n})):a.createElement(g,l({ref:t},d))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:o,l[1]=i;for(var s=2;s<r;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},50426:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>s});var a=n(87462),o=(n(67294),n(3905));const r={},l="Toggle Split Button",i={unversionedId:"reference/controls/detailed-reference/togglesplitbutton",id:"reference/controls/detailed-reference/togglesplitbutton",title:"Toggle Split Button",description:"The ToggleSplitButton functions as a ToggleButton with primary and secondary parts that can each be pressed separately. The primary part behaves like a normal ToggleButton and the secondary part opens a Flyout with additional actions.",source:"@site/docs/reference/controls/detailed-reference/togglesplitbutton.md",sourceDirName:"reference/controls/detailed-reference",slug:"/reference/controls/detailed-reference/togglesplitbutton",permalink:"/avalonia-docs/docs/next/reference/controls/detailed-reference/togglesplitbutton",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/reference/controls/detailed-reference/togglesplitbutton.md",tags:[],version:"current",frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Toggle Button",permalink:"/avalonia-docs/docs/next/reference/controls/detailed-reference/togglebutton"},next:{title:"Tool Tip",permalink:"/avalonia-docs/docs/next/reference/controls/detailed-reference/tooltip"}},p={},s=[{value:"Is this the right control?",id:"is-this-the-right-control",level:2},{value:"Common Properties",id:"common-properties",level:2},{value:"Pseudoclasses",id:"pseudoclasses",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"Source code",id:"source-code",level:2},{value:"Examples",id:"examples",level:2},{value:"Basic example",id:"basic-example",level:3},{value:"Text editor with numbered or bulleted list example",id:"text-editor-with-numbered-or-bulleted-list-example",level:3}],d={toc:s},c="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"toggle-split-button"},"Toggle Split Button"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ToggleSplitButton")," functions as a ",(0,o.kt)("a",{parentName:"p",href:"togglebutton"},(0,o.kt)("inlineCode",{parentName:"a"},"ToggleButton"))," with primary and secondary parts that can each be pressed separately. The primary part behaves like a normal ",(0,o.kt)("inlineCode",{parentName:"p"},"ToggleButton")," and the secondary part opens a ",(0,o.kt)("a",{parentName:"p",href:"../flyouts"},(0,o.kt)("inlineCode",{parentName:"a"},"Flyout"))," with additional actions."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ToggleSplitButton")," has only two states: checked and unchecked. Indeterminate is not supported like it is with a standard ",(0,o.kt)("inlineCode",{parentName:"p"},"ToggleButton"),". This was done intentionally to match WinUI and restricts the control\u2019s usage. The ",(0,o.kt)("inlineCode",{parentName:"p"},"ToggleSplitButton")," should only be used to turn features on/off. Anything other than that is currently considered poor practice from a usability standpoint.")),(0,o.kt)("h2",{id:"is-this-the-right-control"},"Is this the right control?"),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"ToggleSplitButton")," is a fairly specialized control and its usage should be restricted to where it makes clear sense from a user-standpoint. It is intended to turn a feature on/off while allowing some additional configurations to be specified rather than the default."),(0,o.kt)("p",null,"Like a ",(0,o.kt)("a",{parentName:"p",href:"../buttons/splitbutton"},(0,o.kt)("inlineCode",{parentName:"a"},"SplitButton")),", the most common action should be the default and what is shown in the primary part. However, unlike the ",(0,o.kt)("inlineCode",{parentName:"p"},"SplitButton"),", pressing the primary part will turn this feature on or off instead of simply invoking an action. Additional configurations for the feature should be added to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Flyout")," which is shown when the secondary (drop down) part is pressed."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Pressing a configuration in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Flyout")," should either (1) turn on the feature with the selected configuration, or (2) change the feature to the selected configuration. Pressing a configuration in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Flyout")," should never turn off the feature \u2013 that can only be done by toggling the primary part.")),(0,o.kt)("h2",{id:"common-properties"},"Common Properties"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Property"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"Content")),(0,o.kt)("td",{parentName:"tr",align:null},"The content to display in the primary part")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"Flyout")),(0,o.kt)("td",{parentName:"tr",align:null},"The ",(0,o.kt)("inlineCode",{parentName:"td"},"Flyout")," which shows up when the secondary part is clicked")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"Command")),(0,o.kt)("td",{parentName:"tr",align:null},"A command to be invoked when the primary button is clicked")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"IsChecked")),(0,o.kt)("td",{parentName:"tr",align:null},"Gets or sets if the ",(0,o.kt)("inlineCode",{parentName:"td"},"ToggleSplitButton")," is checked")))),(0,o.kt)("h2",{id:"pseudoclasses"},"Pseudoclasses"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Pseudoclass"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},":pressed")),(0,o.kt)("td",{parentName:"tr",align:null},"Set when the entire ",(0,o.kt)("inlineCode",{parentName:"td"},"ToggleSplitButton")," is pressed using a keyboard input such as Space or Enter. In this state no distinction is made between primary or secondary parts")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},":flyout-open")),(0,o.kt)("td",{parentName:"tr",align:null},"Set when the ",(0,o.kt)("inlineCode",{parentName:"td"},"Flyout")," is open")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},":checked")),(0,o.kt)("td",{parentName:"tr",align:null},"Set when the ",(0,o.kt)("inlineCode",{parentName:"td"},"ToggleSplitButton")," is checked. (",(0,o.kt)("inlineCode",{parentName:"td"},'IsChecked="true"'),")")))),(0,o.kt)("h2",{id:"api-reference"},"API Reference"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"http://reference.avaloniaui.net/api/Avalonia.Controls/ToggleSplitButton/"},"ToggleSplitButton")),(0,o.kt)("h2",{id:"source-code"},"Source code"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/AvaloniaUI/Avalonia/blob/master/src/Avalonia.Controls/SplitButton/ToggleSplitButton.cs"},"ToggleSplitButton.cs")),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("h3",{id:"basic-example"},"Basic example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},'<ToggleSplitButton Content="Content"\n                   IsChecked="{Binding IsChecked}">\n    <ToggleSplitButton.Flyout>\n        <MenuFlyout Placement="Bottom">\n            <MenuItem Header="Item 1">\n                <MenuItem Header="Subitem 1" />\n                <MenuItem Header="Subitem 2" />\n                <MenuItem Header="Subitem 3" />\n            </MenuItem>\n            <MenuItem Header="Item 2"\n                      InputGesture="Ctrl+A" />\n            <MenuItem Header="Item 3" />\n        </MenuFlyout>\n    </ToggleSplitButton.Flyout>\n</ToggleSplitButton>\n')),(0,o.kt)("img",{src:"/img/gitbook-import/assets/ToggleSplitButton\\_closed\\_unchecked.png",alt:""}),"_SplitButton (Flyout closed, unchecked)_",(0,o.kt)("img",{src:"/img/gitbook-import/assets/ToggleSplitButton\\_closed\\_checked.png",alt:""}),"_SplitButton (Flyout closed, checked)_",(0,o.kt)("img",{src:"/img/gitbook-import/assets/ToggleSplitButton\\_opened\\_checked.png",alt:""}),"_SplitButton (Flyout opened, checked)_",(0,o.kt)("h3",{id:"text-editor-with-numbered-or-bulleted-list-example"},"Text editor with numbered or bulleted list example"),(0,o.kt)("p",null,"Continuing the text editor example from ",(0,o.kt)("inlineCode",{parentName:"p"},"SplitButton"),", a common use case of the ",(0,o.kt)("inlineCode",{parentName:"p"},"ToggleSplitButton")," is to add bulleted/numbered lists to text. In this example the primary part will toggle the list on/off while the secondary part will open a ",(0,o.kt)("inlineCode",{parentName:"p"},"Flyout")," and allow selecting the bullet or number style."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},'\x3c!-- We have the following Icons defined in our Resources --\x3e\n<PathGeometry x:Key="IconData.NumberedList"> {{ Path Data }} </PathGeometry>\n<PathGeometry x:Key="IconData.BulletedList"> {{ Path Data }} </PathGeometry>\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},'<ToggleSplitButton IsChecked="{Binding TextEditorHasList}">\n    <ToggleSplitButton.Content>\n        \x3c!-- Note: For this example we keep the content static, but you can use dynamic content --\x3e\n        <PathIcon Data="{DynamicResource IconData.BulletedList}" />\n    </ToggleSplitButton.Content>\n    <ToggleSplitButton.Flyout>\n        <Flyout Placement="Bottom">\n            \x3c!-- Note: For this example we keep the content static, but you can use dynamic content --\x3e\n            <ListBox Height="200" Width="200" >\n                <ListBoxItem>\n                    <StackPanel Orientation="Horizontal">\n                        <PathIcon Data="{DynamicResource IconData.NumberedList}" />\n                        <TextBlock Text="Numbered List" />\n                    </StackPanel>\n                </ListBoxItem>\n                <ListBoxItem>\n                    <StackPanel Orientation="Horizontal">\n                        <PathIcon Data="{DynamicResource IconData.BulletedList}" />\n                        <TextBlock Text="Bulleted List" />\n                    </StackPanel>\n                </ListBoxItem>\n            </ListBox>\n        </Flyout>\n    </ToggleSplitButton.Flyout>\n</ToggleSplitButton>\n')),(0,o.kt)("img",{src:"/img/gitbook-import/assets/ToggleSplitButton\\_TextListExample.png",alt:""}),"_Sample of ToggleSplitButton for toggle text lists on and off and selecting the list format_")}u.isMDXComponent=!0}}]);