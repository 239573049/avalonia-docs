"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[70068],{3905:(e,n,o)=>{o.d(n,{Zo:()=>u,kt:()=>v});var t=o(67294);function r(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function i(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function a(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?i(Object(o),!0).forEach((function(n){r(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function l(e,n){if(null==e)return{};var o,t,r=function(e,n){if(null==e)return{};var o,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)o=i[t],n.indexOf(o)>=0||(r[o]=e[o]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)o=i[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var d=t.createContext({}),c=function(e){var n=t.useContext(d),o=n;return e&&(o="function"==typeof e?e(n):a(a({},n),e)),o},u=function(e){var n=c(e.components);return t.createElement(d.Provider,{value:n},e.children)},p="mdxType",s={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var o=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(o),m=r,v=p["".concat(d,".").concat(m)]||p[m]||s[m]||i;return o?t.createElement(v,a(a({ref:n},u),{},{components:o})):t.createElement(v,a({ref:n},u))}));function v(e,n){var o=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=o.length,a=new Array(i);a[0]=m;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l[p]="string"==typeof e?e:r,a[1]=l;for(var c=2;c<i;c++)a[c]=o[c];return t.createElement.apply(null,a)}return t.createElement.apply(null,o)}m.displayName="MDXCreateElement"},85021:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>s,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var t=o(87462),r=(o(67294),o(3905));const i={info:"build-and-run-your-application-on-a-device",title:"Build and run your Application on a physical device"},a=void 0,l={unversionedId:"tutorials/developing-for-mobile/android/build-and-run-your-application-on-a-device",id:"version-0.10.x/tutorials/developing-for-mobile/android/build-and-run-your-application-on-a-device",title:"Build and run your Application on a physical device",description:"To deploy and run the Application on a real Android device, make sure of the following:",source:"@site/versioned_docs/version-0.10.x/tutorials/developing-for-mobile/android/build-and-run-your-application-on-a-device.md",sourceDirName:"tutorials/developing-for-mobile/android",slug:"/tutorials/developing-for-mobile/android/build-and-run-your-application-on-a-device",permalink:"/avalonia-docs/docs/tutorials/developing-for-mobile/android/build-and-run-your-application-on-a-device",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/versioned_docs/version-0.10.x/tutorials/developing-for-mobile/android/build-and-run-your-application-on-a-device.md",tags:[],version:"0.10.x",frontMatter:{info:"build-and-run-your-application-on-a-device",title:"Build and run your Application on a physical device"},sidebar:"documentationSidebar",previous:{title:"Build and run your Application on a Simulator",permalink:"/avalonia-docs/docs/tutorials/developing-for-mobile/android/build-and-run-your-application-on-a-simulator"},next:{title:"Configure debugging in Visual Studio Code (Linux)",permalink:"/avalonia-docs/docs/tutorials/developing-for-mobile/android/configure-vscode-debug-linux"}},d={},c=[],u={toc:c},p="wrapper";function s(e){let{components:n,...o}=e;return(0,r.kt)(p,(0,t.Z)({},u,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"To deploy and run the Application on a real Android device, make sure of the following:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Have the Android version on the device match the supported or target versions in AndroidManifest.xml (if no versions are specified, assume that target version is latest, supported by Xamarin/MAUI),"),(0,r.kt)("li",{parentName:"ol"},"Connect the device to development machine and enable USB Debugging in developer settings,"),(0,r.kt)("li",{parentName:"ol"},'If default connection mode is "battery charging only", switch to MTP or another mode (otherwise ADB won\'t connect to the device),'),(0,r.kt)("li",{parentName:"ol"},"Have matching Android SDK installed to the target SDK version in AndroidManifest.xml,")),(0,r.kt)("p",null,"Deployment is done via running the ",(0,r.kt)("inlineCode",{parentName:"p"},"dotnet run")," command (if using console), or via the following setup (if using Visual Studio Code):"),(0,r.kt)("p",null,"tasks.json:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "version": "2.0.0",\n    "tasks": [\n        {\n            "label": "build-android",\n            "command": "dotnet",\n            "type": "process",\n            "args": [\n                "build",\n                "--no-restore",\n                "${workspaceFolder}/<ProjectName>.csproj",\n                "-p:TargetFramework=net6.0-android",\n                "-p:Configuration=Debug"\n            ],\n            "problemMatcher": "$msCompile"\n        }\n    ]\n}\n')),(0,r.kt)("p",null,"where ",(0,r.kt)("inlineCode",{parentName:"p"},"<ProjectName>")," is your Android-specific Avalonia project name."))}s.isMDXComponent=!0}}]);