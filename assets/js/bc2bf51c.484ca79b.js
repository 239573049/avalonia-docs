"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[48111],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=i,h=m["".concat(s,".").concat(u)]||m[u]||c[u]||o;return n?a.createElement(h,r(r({ref:t},d),{},{components:n})):a.createElement(h,r({ref:t},d))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},14531:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));const o={id:"wiring-up-the-views",title:"Wiring up the Views"},r=void 0,l={unversionedId:"tutorials/todo-list-app/wiring-up-the-views",id:"version-0.10.x/tutorials/todo-list-app/wiring-up-the-views",title:"Wiring up the Views",description:"Now that we've got the view models set up, we need to make our views use these view models. We do this by making use of Avalonia's data binding feature.",source:"@site/versioned_docs/version-0.10.x/tutorials/todo-list-app/wiring-up-the-views.md",sourceDirName:"tutorials/todo-list-app",slug:"/tutorials/todo-list-app/wiring-up-the-views",permalink:"/avalonia-docs/docs/tutorials/todo-list-app/wiring-up-the-views",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/versioned_docs/version-0.10.x/tutorials/todo-list-app/wiring-up-the-views.md",tags:[],version:"0.10.x",frontMatter:{id:"wiring-up-the-views",title:"Wiring up the Views"},sidebar:"documentationSidebar",previous:{title:"Creating a Model & ViewModel",permalink:"/avalonia-docs/docs/tutorials/todo-list-app/creating-a-model-and-viewmodel"},next:{title:"Locating Views",permalink:"/avalonia-docs/docs/tutorials/todo-list-app/locating-views"}},s={},p=[{value:"Update MainWindow",id:"update-mainwindow",level:2},{value:"Update TodoListView",id:"update-todolistview",level:2},{value:"Run the application",id:"run-the-application",level:2}],d={toc:p},m="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Now that we've got the view models set up, we need to make our views use these view models. We do this by making use of Avalonia's ",(0,i.kt)("a",{parentName:"p",href:"../../getting-started/programming-with-avalonia/data-binding"},"data binding")," feature."),(0,i.kt)("h2",{id:"update-mainwindow"},"Update MainWindow"),(0,i.kt)("p",null,"We're exposing the list in ",(0,i.kt)("inlineCode",{parentName:"p"},"MainWindowViewModel.List")," so let's use that property to display the list in ",(0,i.kt)("inlineCode",{parentName:"p"},"MainWindow.axaml"),"."),(0,i.kt)("p",null,"Views/MainWindow.axaml"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markup"},'<Window xmlns="https://github.com/avaloniaui"\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n        x:Class="Todo.Views.MainWindow"\n        Icon="/Assets/avalonia-logo.ico"\n        Width="200" Height="300"\n        Title="Avalonia Todo"\n        Content="{Binding List}">\n</Window>\n')),(0,i.kt)("p",null,"The main change is that instead of using a ",(0,i.kt)("inlineCode",{parentName:"p"},"<views:TodoListView/>")," control as the content of the window, we're now binding the window's content to the ",(0,i.kt)("inlineCode",{parentName:"p"},"MainWindowViewModel.List")," property, which contains our list:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markup"},'Content="{Binding List}"\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"{Binding}")," is a markup extension which instantiates a ",(0,i.kt)("a",{parentName:"p",href:"../../data-binding/bindings"},"binding")," to a property on a control's ",(0,i.kt)("inlineCode",{parentName:"p"},"DataContext"),". You'll remember that in ",(0,i.kt)("inlineCode",{parentName:"p"},"App.axaml.cs")," we ",(0,i.kt)("a",{parentName:"p",href:"creating-a-model-and-viewmodel#create-an-instance-of-todolistviewmodel"},"assigned an instance of ",(0,i.kt)("inlineCode",{parentName:"a"},"MainWindowViewModel")," to the window's ",(0,i.kt)("inlineCode",{parentName:"a"},"DataContext")," property"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Window.Content")," property can either be set by placing a control as a child of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Window")," ","(",(0,i.kt)("a",{parentName:"p",href:"creating-a-view#display-the-view-in-the-window"},"as we were doing previously"),")",", or by assigning a value to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Content")," property. Both of these syntaxes are equivalent, meaning that writing:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markup"},'<Window xmlns="https://github.com/avaloniaui">Hello World!</Window>\n')),(0,i.kt)("p",null,"Is ",(0,i.kt)("em",{parentName:"p"},"exactly")," the same as writing:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markup"},'<Window xmlns="https://github.com/avaloniaui" Content="Hello World!"/>\n')),(0,i.kt)("h2",{id:"update-todolistview"},"Update TodoListView"),(0,i.kt)("p",null,"Now we need to make ",(0,i.kt)("inlineCode",{parentName:"p"},"TodoListView")," get the list of TODO items from the view model:"),(0,i.kt)("p",null,"Views/TodoListView.axaml"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markup"},'<UserControl xmlns="https://github.com/avaloniaui"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"\n             mc:Ignorable="d" d:DesignWidth="200" d:DesignHeight="300"\n             x:Class="Todo.Views.TodoListView">\n  <DockPanel>\n    <Button DockPanel.Dock="Bottom"\n            HorizontalAlignment="Center">\n      Add an item\n    </Button>\n    <ItemsControl Items="{Binding Items}">\n      <ItemsControl.ItemTemplate>\n        <DataTemplate>\n          <CheckBox Margin="4"\n                    IsChecked="{Binding IsChecked}"\n                    Content="{Binding Description}"/>\n        </DataTemplate>\n      </ItemsControl.ItemTemplate>\n    </ItemsControl>\n  </DockPanel>\n</UserControl>\n')),(0,i.kt)("p",null,"The first thing to notice here is that we've changed the ",(0,i.kt)("inlineCode",{parentName:"p"},"<StackPanel>")," control to an ",(0,i.kt)("inlineCode",{parentName:"p"},"ItemsControl"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markup"},'<ItemsControl Items="{Binding Items}">\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ItemsControl")," is a very simple control which displays each item in the collection assigned to its ",(0,i.kt)("inlineCode",{parentName:"p"},"Items")," property. Here each item will be an instance of our model ",(0,i.kt)("inlineCode",{parentName:"p"},"TodoItem")," as that's what ",(0,i.kt)("inlineCode",{parentName:"p"},"TodoListViewModel.Items")," exposes."),(0,i.kt)("p",null,"How each item is displayed is controlled by the ",(0,i.kt)("inlineCode",{parentName:"p"},"ItemTemplate"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"ItemTemplate")," takes a ",(0,i.kt)("a",{parentName:"p",href:"https://avaloniaui.net/docs/templates/datatemplate"},(0,i.kt)("inlineCode",{parentName:"a"},"DataTemplate"))," whose content is repeated for each item. In this case we display each item as a ",(0,i.kt)("inlineCode",{parentName:"p"},"CheckBox"),", with the check state bound to the ",(0,i.kt)("inlineCode",{parentName:"p"},"IsChecked")," property of the ",(0,i.kt)("inlineCode",{parentName:"p"},"TodoItemViewModel")," and the content bound to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Description"),". We also set a ",(0,i.kt)("inlineCode",{parentName:"p"},"Margin")," as before to space the items out a little:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markup"},'<ItemsControl.ItemTemplate>\n  <DataTemplate>\n    <CheckBox Margin="4"\n              IsChecked="{Binding IsChecked}"\n              Content="{Binding Description}"/>\n  </DataTemplate>\n</ItemsControl.ItemTemplate>\n')),(0,i.kt)("h2",{id:"run-the-application"},"Run the application"),(0,i.kt)("p",null,"If you now run the application you will see the items in the ","(","fake",")"," database displayed."),(0,i.kt)("div",{style:{textAlign:"center"}},(0,i.kt)("img",{src:"/img/tutorials/todo-list-app/wiring-up-the-views/wiring-up-views-run.png",alt:"The running application"})))}c.isMDXComponent=!0}}]);