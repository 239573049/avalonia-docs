"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[35309],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=o.createContext({}),c=function(e){var n=o.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return o.createElement(d.Provider,{value:n},e.children)},u="mdxType",s={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=r,f=u["".concat(d,".").concat(m)]||u[m]||s[m]||a;return t?o.createElement(f,i(i({ref:n},p),{},{components:t})):o.createElement(f,i({ref:n},p))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=m;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},63226:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>s,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var o=t(87462),r=(t(67294),t(3905));const a={id:"build-and-run-your-application-on-a-device",title:"Build and run your Application on a physical device"},i="Build and run your Application on a physical device",l={unversionedId:"guides/platforms/android/build-and-run-your-application-on-a-device",id:"guides/platforms/android/build-and-run-your-application-on-a-device",title:"Build and run your Application on a physical device",description:"To deploy and run the Application on a real Android device, make sure of the following:",source:"@site/docs/guides/platforms/android/build-and-run-your-application-on-a-device.md",sourceDirName:"guides/platforms/android",slug:"/guides/platforms/android/build-and-run-your-application-on-a-device",permalink:"/avalonia-docs/docs/next/guides/platforms/android/build-and-run-your-application-on-a-device",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/guides/platforms/android/build-and-run-your-application-on-a-device.md",tags:[],version:"current",frontMatter:{id:"build-and-run-your-application-on-a-device",title:"Build and run your Application on a physical device"},sidebar:"documentationSidebar",previous:{title:"Android",permalink:"/avalonia-docs/docs/next/guides/platforms/android/"},next:{title:"Build and run your Application on a Simulator",permalink:"/avalonia-docs/docs/next/guides/platforms/android/build-and-run-your-application-on-a-simulator"}},d={},c=[],p={toc:c},u="wrapper";function s(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"build-and-run-your-application-on-a-physical-device"},"Build and run your Application on a physical device"),(0,r.kt)("p",null,"To deploy and run the Application on a real Android device, make sure of the following:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Have the Android version on the device match the supported or target versions in AndroidManifest.xml (if no versions are specified, assume that target version is latest, supported by Xamarin/MAUI),"),(0,r.kt)("li",{parentName:"ol"},"Connect the device to development machine and enable USB Debugging in developer settings,"),(0,r.kt)("li",{parentName:"ol"},'If default connection mode is "battery charging only", switch to MTP or another mode (otherwise ADB won\'t connect to the device),'),(0,r.kt)("li",{parentName:"ol"},"Have matching Android SDK installed to the target SDK version in AndroidManifest.xml,")),(0,r.kt)("p",null,"Deployment is done via running the ",(0,r.kt)("inlineCode",{parentName:"p"},"dotnet run")," command (if using console), or via the following setup (if using Visual Studio Code):"),(0,r.kt)("p",null,"tasks.json:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "version": "2.0.0",\n    "tasks": [\n        {\n            "label": "build-android",\n            "command": "dotnet",\n            "type": "process",\n            "args": [\n                "build",\n                "--no-restore",\n                "${workspaceFolder}/<ProjectName>.csproj",\n                "-p:TargetFramework=net6.0-android",\n                "-p:Configuration=Debug"\n            ],\n            "problemMatcher": "$msCompile"\n        }\n    ]\n}\n')),(0,r.kt)("p",null,"where ",(0,r.kt)("inlineCode",{parentName:"p"},"<ProjectName>")," is your Android-specific Avalonia project name."))}s.isMDXComponent=!0}}]);