"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[35214],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=o.createContext({}),c=function(e){var n=o.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return o.createElement(d.Provider,{value:n},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),s=c(t),u=a,g=s["".concat(d,".").concat(u)]||s[u]||m[u]||r;return t?o.createElement(g,i(i({ref:n},p),{},{components:t})):o.createElement(g,i({ref:n},p))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=u;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l[s]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},91022:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=t(87462),a=(t(67294),t(3905));const r={id:"binding-to-controls",title:"Binding to Controls"},i=void 0,l={unversionedId:"data-binding/binding-to-controls",id:"version-0.10.x/data-binding/binding-to-controls",title:"Binding to Controls",description:"As well as binding to a control's DataContext you can also bind to other controls.",source:"@site/versioned_docs/version-0.10.x/data-binding/binding-to-controls.md",sourceDirName:"data-binding",slug:"/data-binding/binding-to-controls",permalink:"/avalonia-docs/docs/data-binding/binding-to-controls",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/versioned_docs/version-0.10.x/data-binding/binding-to-controls.md",tags:[],version:"0.10.x",frontMatter:{id:"binding-to-controls",title:"Binding to Controls"},sidebar:"documentationSidebar",previous:{title:"Compiled Bindings",permalink:"/avalonia-docs/docs/data-binding/compiled-bindings"},next:{title:"Converting Binding Values",permalink:"/avalonia-docs/docs/data-binding/converting-binding-values"}},d={},c=[{value:"Binding to a named control",id:"binding-to-a-named-control",level:2},{value:"Binding to an Ancestor",id:"binding-to-an-ancestor",level:2}],p={toc:c},s="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(s,(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"As well as binding to a control's ",(0,a.kt)("a",{parentName:"p",href:"the-datacontext"},(0,a.kt)("inlineCode",{parentName:"a"},"DataContext"))," you can also bind to other controls."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Note that when you do this, the binding source is to the ",(0,a.kt)("em",{parentName:"p"},"control itself")," not the control's ",(0,a.kt)("inlineCode",{parentName:"p"},"DataContext"),". If you want to bind to the control's ",(0,a.kt)("inlineCode",{parentName:"p"},"DataContext")," then you'll need to specify that in the binding path.")),(0,a.kt)("h2",{id:"binding-to-a-named-control"},"Binding to a named control"),(0,a.kt)("p",null,"If you want to bind to a property on another named control, you can use the control name prefixed by a ",(0,a.kt)("inlineCode",{parentName:"p"},"#")," character."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'<TextBox Name="other">\n\n\x3c!-- Binds to the Text property of the "other" control --\x3e\n<TextBlock Text="{Binding #other.Text}"/>\n')),(0,a.kt)("p",null,"This is the equivalent to the long-form binding that will be familiar to WPF and UWP users:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'<TextBox Name="other">\n<TextBlock Text="{Binding Text, ElementName=other}"/>\n')),(0,a.kt)("p",null,"Avalonia supports both syntaxes but the short-form ",(0,a.kt)("inlineCode",{parentName:"p"},"#")," syntax is less verbose."),(0,a.kt)("h2",{id:"binding-to-an-ancestor"},"Binding to an Ancestor"),(0,a.kt)("p",null,"You can bind to the logical parent of the target using the ",(0,a.kt)("inlineCode",{parentName:"p"},"$parent")," symbol:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'<Border Tag="Hello World!">\n  <TextBlock Text="{Binding $parent.Tag}"/>\n</Border>\n')),(0,a.kt)("p",null,"Or to an ancestor by adding an indexer to the ",(0,a.kt)("inlineCode",{parentName:"p"},"$parent")," symbol:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'<Border Tag="Hello World!">\n  <Border>\n    <TextBlock Text="{Binding $parent[1].Tag}"/>\n  </Border>\n</Border>\n')),(0,a.kt)("p",null,"The indexer is 0-based so ",(0,a.kt)("inlineCode",{parentName:"p"},"$parent[0]")," is equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"$parent"),"."),(0,a.kt)("p",null,"You can also bind to an ancestor by type:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'<Border Tag="Hello World!">\n  <Decorator>\n    <TextBlock Text="{Binding $parent[Border].Tag}"/>\n  </Decorator>\n</Border>\n')),(0,a.kt)("p",null,"Finally, you can combine the indexer and the type:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'<Border Tag="Hello World!">\n  <Border>\n    <Decorator>\n    <TextBlock Text="{Binding $parent[Border;1].Tag}"/>\n    </Decorator>\n  </Border>\n</Border>\n')),(0,a.kt)("p",null,"If you need to include a XAML namespace in the ancestor type, you can do that using the ",(0,a.kt)("inlineCode",{parentName:"p"},":")," character as normal:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'<local:MyControl Tag="Hello World!">\n  <Decorator>\n    <TextBlock Text="{Binding $parent[local:MyControl].Tag}"/>\n  </Decorator>\n</local:MyControl>\n')),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"Avalonia also supports WPF/UWP's ",(0,a.kt)("inlineCode",{parentName:"p"},"RelativeSource")," syntax which does something similar, but is ",(0,a.kt)("em",{parentName:"p"},"not")," the same. ",(0,a.kt)("inlineCode",{parentName:"p"},"RelativeSource")," works on the ",(0,a.kt)("em",{parentName:"p"},"visual")," tree whereas the syntax given here works on the ",(0,a.kt)("em",{parentName:"p"},"logical")," tree.")))}m.isMDXComponent=!0}}]);