"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[74316],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>u});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=d(n),g=i,u=c["".concat(p,".").concat(g)]||c[g]||m[g]||r;return n?a.createElement(u,o(o({ref:t},s),{},{components:n})):a.createElement(u,o({ref:t},s))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=g;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var d=2;d<r;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},48131:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var a=n(87462),i=(n(67294),n(3905));const r={id:"bindings",title:"Bindings"},o=void 0,l={unversionedId:"data-binding/bindings",id:"version-0.10.x/data-binding/bindings",title:"Bindings",description:"You bind in XAML using the  markup extension. By using bindings \\(assuming you've implemented change notifications\\) any changes to the data context will automatically be updated in the control.",source:"@site/versioned_docs/version-0.10.x/data-binding/bindings.md",sourceDirName:"data-binding",slug:"/data-binding/bindings",permalink:"/avalonia-docs/docs/data-binding/bindings",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/versioned_docs/version-0.10.x/data-binding/bindings.md",tags:[],version:"0.10.x",frontMatter:{id:"bindings",title:"Bindings"},sidebar:"documentationSidebar",previous:{title:"Change Notifications",permalink:"/avalonia-docs/docs/data-binding/change-notifications"},next:{title:"Compiled Bindings",permalink:"/avalonia-docs/docs/data-binding/compiled-bindings"}},p={},d=[{value:"Binding Path",id:"binding-path",level:2},{value:"Binding Modes",id:"binding-modes",level:2},{value:"String Formatting",id:"string-formatting",level:2},{value:"Samples",id:"samples",level:2}],s={toc:d},c="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"You bind in XAML using the ",(0,i.kt)("inlineCode",{parentName:"p"},"{Binding}")," markup extension. By using bindings ","(","assuming you've implemented ",(0,i.kt)("a",{parentName:"p",href:"change-notifications"},"change notifications"),")"," any changes to the data context will automatically be updated in the control."),(0,i.kt)("p",null,"By default a binding binds to a property on the ",(0,i.kt)("a",{parentName:"p",href:"the-datacontext"},(0,i.kt)("inlineCode",{parentName:"a"},"DataContext")),", e.g.:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markup"},'\x3c!-- Binds to the TextBlock\'s DataContext.Name property --\x3e\n<TextBlock Text="{Binding Name}"/>\n\n\x3c!-- Which is the same as (\'Path\' is optional) --\x3e\n<TextBlock Text="{Binding Path=Name}"/>\n')),(0,i.kt)("p",null,"An empty binding binds to DataContext itself"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markup"},'\x3c!-- Binds to the TextBlock\'s DataContext property --\x3e\n<TextBlock Text="{Binding}"/>\n\n\x3c!-- Which is the same as --\x3e\n<TextBlock Text="{Binding .}"/>\n')),(0,i.kt)("p",null,"We call the property on the control the binding ",(0,i.kt)("em",{parentName:"p"},"target")," and the property on the ",(0,i.kt)("inlineCode",{parentName:"p"},"DataContext")," the binding ",(0,i.kt)("em",{parentName:"p"},"source"),"."),(0,i.kt)("h2",{id:"binding-path"},"Binding Path"),(0,i.kt)("p",null,"The binding path above can be a single property, or it can be a chain of properties. For example if the object assigned to the ",(0,i.kt)("inlineCode",{parentName:"p"},"DataContext")," has a ",(0,i.kt)("inlineCode",{parentName:"p"},"Student")," property, and the value of this property has a ",(0,i.kt)("inlineCode",{parentName:"p"},"Name"),", you can bind to the student name using:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markup"},'<TextBlock Text="{Binding Student.Name}"/>\n')),(0,i.kt)("p",null,"You can also include array/list indexers in binding paths:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markup"},'<TextBlock Text="{Binding Students[0].Name}"/>\n')),(0,i.kt)("h2",{id:"binding-modes"},"Binding Modes"),(0,i.kt)("p",null,"You can change the behavior of a ",(0,i.kt)("inlineCode",{parentName:"p"},"{Binding}")," by specifying a binding ",(0,i.kt)("inlineCode",{parentName:"p"},"Mode"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markup"},'<TextBlock Text="{Binding Name, Mode=OneTime}">\n')),(0,i.kt)("p",null,"The available binding modes are:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Mode"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"OneWay")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Changes to the source are automatically propagated to the target")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TwoWay")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Changes to the source are automatically propagated to the target and vice-versa")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"OneTime")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The value from the source is propagated at initialization to the target and subsequent changes are ignored")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"OneWayToSource")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Changes to the target are propagated to the source")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Default")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The binding mode is based on the property")))),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Default")," mode is assumed if one is not specified. This mode is generally ",(0,i.kt)("inlineCode",{parentName:"p"},"OneWay")," for control properties that do not change due to user input ","(","e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"TextBlock.Text"),")"," and ",(0,i.kt)("inlineCode",{parentName:"p"},"TwoWay")," for control properties that ",(0,i.kt)("em",{parentName:"p"},"do")," change due to user input ","(","e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"TextBox.Text"),")","."),(0,i.kt)("h2",{id:"string-formatting"},"String Formatting"),(0,i.kt)("p",null,"You can apply a format string to the binding to influence how the value is represented in the UI:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markup"},'\x3c!-- Option 1: Use string format without curly braces --\x3e\n<TextBlock Text="{Binding FloatValue, StringFormat=0.0}" />\n\n\x3c!-- Option 2: Use curly braces {} to escape string format --\x3e\n<TextBlock Text="{Binding FloatValue, StringFormat={}{0:0.0}}" />\n\n\x3c!-- Option 3: Use backslash \\{ to escape string format --\x3e\n<TextBlock Text="{Binding FloatValue, StringFormat=\\{0:0.0\\}}" />\n\n\x3c!-- Option 4: If the string format does not start with {0}, you don\'t need to escape the string format. --\x3e\n\x3c!-- Note: If you have a whitespace in your string format, surround it with single quotes \'\' --\x3e\n<TextBlock Text="{Binding Animals.Count, StringFormat=\'I have {0} animals.\'}" />\n\x3c!-- Note: You need to escape the curly braces in case your format string starts with the value you are binding, like so: --\x3e\n<TextBlock Text="{Binding Animals.Count, StringFormat=\'{}{0} animals live in the farm.\'}" />\n')),(0,i.kt)("p",null,"When a ",(0,i.kt)("inlineCode",{parentName:"p"},"StringFormat")," parameter is present, the value of the binding will be converted using the ",(0,i.kt)("inlineCode",{parentName:"p"},"StringFormatValueConverter")," which will be passed the format string."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Read more about the available string formats in the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string.format"},"Microsoft Docs"))),(0,i.kt)("h2",{id:"samples"},"Samples"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/AvaloniaUI/Avalonia.Samples/tree/main/src/Avalonia.Samples/MVVM/BasicMvvmSample"},"Basic MVVM Sample")))}m.isMDXComponent=!0}}]);