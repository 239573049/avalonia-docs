"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[2450],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>w});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),p=d(a),u=o,w=p["".concat(s,".").concat(u)]||p[u]||m[u]||i;return a?n.createElement(w,l(l({ref:t},c),{},{components:a})):n.createElement(w,l({ref:t},c))}));function w(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=a.length,l=new Array(i);l[0]=u;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[p]="string"==typeof e?e:o,l[1]=r;for(var d=2;d<i;d++)l[d]=a[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},92432:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var n=a(87462),o=(a(67294),a(3905));const i={id:"creating-a-model-and-viewmodel",title:"Creating a Model & ViewModel"},l=void 0,r={unversionedId:"tutorials/todo-list-app/creating-a-model-and-viewmodel",id:"version-0.10.x/tutorials/todo-list-app/creating-a-model-and-viewmodel",title:"Creating a Model & ViewModel",description:"Now that we've got a basic view on-screen let's think about how we could display real data from a database or similar in it. The most obvious, and traditional way to do this would be to load the data in the view's constructor and create a CheckBox for each TODO item in code. However doing it this way has a few disadvantages:",source:"@site/versioned_docs/version-0.10.x/tutorials/todo-list-app/creating-a-model-and-viewmodel.md",sourceDirName:"tutorials/todo-list-app",slug:"/tutorials/todo-list-app/creating-a-model-and-viewmodel",permalink:"/avalonia-docs/docs/tutorials/todo-list-app/creating-a-model-and-viewmodel",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/versioned_docs/version-0.10.x/tutorials/todo-list-app/creating-a-model-and-viewmodel.md",tags:[],version:"0.10.x",frontMatter:{id:"creating-a-model-and-viewmodel",title:"Creating a Model & ViewModel"},sidebar:"documentationSidebar",previous:{title:"Creating a View",permalink:"/avalonia-docs/docs/tutorials/todo-list-app/creating-a-view"},next:{title:"Wiring up the Views",permalink:"/avalonia-docs/docs/tutorials/todo-list-app/wiring-up-the-views"}},s={},d=[{value:"Create the Model",id:"create-the-model",level:3},{value:"Create a (fake) database",id:"create-a-fake-database",level:3},{value:"Create a View Model",id:"create-a-view-model",level:3},{value:"Create an instance of TodoListViewModel",id:"create-an-instance-of-todolistviewmodel",level:3}],c={toc:d},p="wrapper";function m(e){let{components:t,...a}=e;return(0,o.kt)(p,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Now that we've got a basic view on-screen let's think about how we could display real data from a database or similar in it. The most obvious, and traditional way to do this would be to load the data in the view's constructor and create a ",(0,o.kt)("inlineCode",{parentName:"p"},"CheckBox")," for each TODO item in code. However doing it this way has a few disadvantages:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We can't use XAML"),(0,o.kt)("li",{parentName:"ul"},"We have to write code to react to changes in the data and update the display"),(0,o.kt)("li",{parentName:"ul"},"It's not unit-testable")),(0,o.kt)("p",null,"These considerations may not seem important for a small application, but as your application grows they become bigger and bigger problems: particularly the testability part."),(0,o.kt)("p",null,"There is a better way! We mentioned the MVVM pattern at the beginning of this tutorial and it's that pattern that we're going to use now."),(0,o.kt)("h3",{id:"create-the-model"},"Create the Model"),(0,o.kt)("p",null,"The first thing to do is to create the model which will represent our data as it would be stored in a database. Our model is going to be pretty simple: each TODO item will consist of a textual description and a boolean value representing whether the item is checked."),(0,o.kt)("p",null,"Place the following class in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Models")," directory in your project:"),(0,o.kt)("p",null,"Models/TodoItem.cs"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"namespace Todo.Models\n{\n    public class TodoItem\n    {\n        public string Description { get; set; }\n        public bool IsChecked { get; set; }\n    }\n}\n")),(0,o.kt)("h3",{id:"create-a-fake-database"},"Create a ","(","fake",")"," database"),(0,o.kt)("p",null,"We could use something like ",(0,o.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/ef/core/get-started/netcore/new-db-sqlite"},"Entity Framework")," to read this data from an SQLite database but because this is a tutorial on Avalonia not Entity Framework, we're not actually going to be using a database. Instead we'll just populate our models from an array."),(0,o.kt)("p",null,"We'll do this in a service called ",(0,o.kt)("inlineCode",{parentName:"p"},"Database")," and put this in a ",(0,o.kt)("inlineCode",{parentName:"p"},"Services")," directory:"),(0,o.kt)("p",null,"Services/Database.cs"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.Collections.Generic;\nusing Todo.Models;\n\nnamespace Todo.Services\n{\n    public class Database\n    {\n        public IEnumerable<TodoItem> GetItems() => new[]\n        {\n            new TodoItem { Description = "Walk the dog" },\n            new TodoItem { Description = "Buy some milk" },\n            new TodoItem { Description = "Learn Avalonia", IsChecked = true },\n        };\n    }\n}\n')),(0,o.kt)("h3",{id:"create-a-view-model"},"Create a View Model"),(0,o.kt)("p",null,"Now we're going to need a view model which represents the list. This is the class that will provide the data for our view."),(0,o.kt)("p",null,"We have already created the view and called it ",(0,o.kt)("inlineCode",{parentName:"p"},"TodoListView")," and so the associated view model is going to be called ",(0,o.kt)("inlineCode",{parentName:"p"},"TodoListViewModel"),". Place this class in the ",(0,o.kt)("inlineCode",{parentName:"p"},"ViewModels")," directory in your project:"),(0,o.kt)("p",null,"ViewModels/TodoListViewModel.cs"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"using System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing Todo.Models;\n\nnamespace Todo.ViewModels\n{\n    public class TodoListViewModel : ViewModelBase\n    {\n        public TodoListViewModel(IEnumerable<TodoItem> items)\n        {\n            Items = new ObservableCollection<TodoItem>(items);\n        }\n\n        public ObservableCollection<TodoItem> Items { get; }\n    }\n}\n")),(0,o.kt)("p",null,"Again, our view model is very simple at this stage. It simply takes a collection of ",(0,o.kt)("inlineCode",{parentName:"p"},"TodoItem")," models in its constructor and puts them into an ",(0,o.kt)("inlineCode",{parentName:"p"},"ObservableCollection")," which is exposed via an ",(0,o.kt)("inlineCode",{parentName:"p"},"Items")," property."),(0,o.kt)("p",null,"One thing to notice is the use of the ",(0,o.kt)("inlineCode",{parentName:"p"},"ViewModelBase")," class. The importance of this will become clear shortly."),(0,o.kt)("h3",{id:"create-an-instance-of-todolistviewmodel"},"Create an instance of TodoListViewModel"),(0,o.kt)("p",null,"We've seen that our ",(0,o.kt)("inlineCode",{parentName:"p"},"TodoListViewModel")," requires a collection of ",(0,o.kt)("inlineCode",{parentName:"p"},"TodoItem")," models to be passed to its constructor, but where do these items come from? Where is ",(0,o.kt)("inlineCode",{parentName:"p"},"TodoListViewModel")," created?"),(0,o.kt)("p",null,"Well, we now have two views and two view models:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"MainWindow")," ","(","created by the template",")"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"MainWindowViewModel")," ","(","created by the template",")"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"TodoListView")," ","(","created by us",")"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"TodoListViewModel")," ","(","created by us",")")),(0,o.kt)("p",null,"If you think back to when we created the views, you'll remember that our views have a parent-child relationship ","(",(0,o.kt)("inlineCode",{parentName:"p"},"TodoListView")," is a child of ",(0,o.kt)("inlineCode",{parentName:"p"},"MainWindow"),")",". This might give us a clue: ",(0,o.kt)("inlineCode",{parentName:"p"},"MainWindowViewModel")," should create the ",(0,o.kt)("inlineCode",{parentName:"p"},"TodoListViewModel"),"!"),(0,o.kt)("p",null,"Edit the ",(0,o.kt)("inlineCode",{parentName:"p"},"MainWindowViewModel.cs")," file to look like this:"),(0,o.kt)("p",null,"MainWindowViewModel.cs"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"using Todo.Services;\n\nnamespace Todo.ViewModels\n{\n    class MainWindowViewModel : ViewModelBase\n    {\n        public MainWindowViewModel(Database db)\n        {\n            List = new TodoListViewModel(db.GetItems());\n        }\n\n        public TodoListViewModel List { get; }\n    }\n}\n")),(0,o.kt)("p",null,"Finally, edit the ",(0,o.kt)("inlineCode",{parentName:"p"},"OnFrameworkInitializationCompleted")," method in ",(0,o.kt)("inlineCode",{parentName:"p"},"App.axaml.cs")," to create an instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"Database")," and pass it to ",(0,o.kt)("inlineCode",{parentName:"p"},"MainWindowViewModel"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"public override void OnFrameworkInitializationCompleted()\n{\n    base.OnFrameworkInitializationCompleted();\n\n    if (ApplicationLifetime is IClassicDesktopStyleApplicationLifetime desktop)\n    {\n        var db = new Database();\n\n        desktop.MainWindow = new MainWindow\n        {\n            DataContext = new MainWindowViewModel(db),\n        };\n    }\n}\n")),(0,o.kt)("p",null,"Next we're going to wire up the views to read from our view models..."))}m.isMDXComponent=!0}}]);