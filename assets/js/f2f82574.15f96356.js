"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[77086],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(n),u=l,k=c["".concat(i,".").concat(u)]||c[u]||m[u]||o;return n?a.createElement(k,r(r({ref:t},d),{},{components:n})):a.createElement(k,r({ref:t},d))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,r=new Array(o);r[0]=u;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[c]="string"==typeof e?e:l,r[1]=s;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6061:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(87462),l=(n(67294),n(3905));const o={id:"styles",title:"Styles"},r=void 0,s={unversionedId:"styling/styles",id:"version-0.10.x/styling/styles",title:"Styles",description:"Styles in Avalonia are used to share property settings between controls. The Avalonia styling system can be thought of as a mix of CSS styling and WPF/UWP styling. At its most basic, a style consists of a selector and a collection of setters.",source:"@site/versioned_docs/version-0.10.x/styling/styles.md",sourceDirName:"styling",slug:"/styling/styles",permalink:"/avalonia-docs/docs/styling/styles",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/versioned_docs/version-0.10.x/styling/styles.md",tags:[],version:"0.10.x",frontMatter:{id:"styles",title:"Styles"},sidebar:"documentationSidebar",previous:{title:"Styling",permalink:"/avalonia-docs/docs/styling/"},next:{title:"Selectors",permalink:"/avalonia-docs/docs/styling/selectors"}},i={},p=[{value:"Style Classes",id:"style-classes",level:3},{value:"Pseudoclasses",id:"pseudoclasses",level:3},{value:"Custom PseudoClasses",id:"custom-pseudoclasses",level:3},{value:"Selectors",id:"selectors",level:3},{value:"Setters",id:"setters",level:3},{value:"Templates in Setters",id:"templates-in-setters",level:3},{value:"Style Precedence",id:"style-precedence",level:3}],d={toc:p},c="wrapper";function m(e){let{components:t,...n}=e;return(0,l.kt)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Styles in Avalonia are used to share property settings between controls. The Avalonia styling system can be thought of as a mix of CSS styling and WPF/UWP styling. At its most basic, a style consists of a ",(0,l.kt)("em",{parentName:"p"},"selector")," and a collection of ",(0,l.kt)("em",{parentName:"p"},"setters"),"."),(0,l.kt)("p",null,"A style applies to the control that it is defined on and all descendent controls."),(0,l.kt)("p",null,"The following style selects any ",(0,l.kt)("inlineCode",{parentName:"p"},"TextBlock")," with a ",(0,l.kt)("inlineCode",{parentName:"p"},"h1")," ",(0,l.kt)("em",{parentName:"p"},"style class")," and sets its font size to 24 point and font weight to bold:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-markup"},'<Style Selector="TextBlock.h1">\n    <Setter Property="FontSize" Value="24"/>\n    <Setter Property="FontWeight" Value="Bold"/>\n</Style>\n')),(0,l.kt)("p",null,"Styles can be defined on any control or on the ",(0,l.kt)("inlineCode",{parentName:"p"},"Application")," object by adding them to the ",(0,l.kt)("a",{parentName:"p",href:"http://reference.avaloniaui.net/api/Avalonia/StyledElement/0A46A84A"},(0,l.kt)("inlineCode",{parentName:"a"},"Control.Styles"))," or ",(0,l.kt)("a",{parentName:"p",href:"http://reference.avaloniaui.net/api/Avalonia/Application/04017CAF"},(0,l.kt)("inlineCode",{parentName:"a"},"Application.Styles"))," collections."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-markup"},'<Window xmlns="https://github.com/avaloniaui"\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">\n    <Window.Styles>\n        <Style Selector="TextBlock.h1">\n            <Setter Property="FontSize" Value="24"/>\n            <Setter Property="FontWeight" Value="Bold"/>\n        </Style>\n    </Window.Styles>\n\n    <TextBlock Classes="h1">I\'m a Heading!</TextBlock>\n</Window>\n')),(0,l.kt)("p",null,"Styles can also be included from other files using the ",(0,l.kt)("inlineCode",{parentName:"p"},"StyleInclude")," class, e.g.:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-markup"},'<Window xmlns="https://github.com/avaloniaui"\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">\n    <Window.Styles>\n        <StyleInclude Source="/CustomStyles.xaml" />\n    </Window.Styles>\n\n    <TextBlock Classes="h1">I\'m a Heading!</TextBlock>\n</Window>\n')),(0,l.kt)("p",null,"Where ",(0,l.kt)("inlineCode",{parentName:"p"},"CustomStyles.xaml")," is a XAML file with a root of either ",(0,l.kt)("inlineCode",{parentName:"p"},"Style")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"Styles")," and is included as an ",(0,l.kt)("a",{parentName:"p",href:"/avalonia-docs/docs/getting-started/assets"},"asset")," in the application, e.g.:"),(0,l.kt)("p",null,"CustomStyles.xaml"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-markup"},'<Styles xmlns="https://github.com/avaloniaui"\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">\n    <Style Selector="TextBlock.h1">\n        ...\n    </Style>\n</Styles>\n')),(0,l.kt)("p",null,"Note that unlike WPF/UWP, styles will have no effect if they're added to a control or application ",(0,l.kt)("inlineCode",{parentName:"p"},"ResourceDictionary"),". This is because the order that styles are defined in Avalonia is important and ",(0,l.kt)("inlineCode",{parentName:"p"},"ResourceDictionary")," is an unsorted dictionary."),(0,l.kt)("h3",{id:"style-classes"},"Style Classes"),(0,l.kt)("p",null,"As in CSS, controls can be given ",(0,l.kt)("em",{parentName:"p"},"style classes")," which can be used in selectors. Style classes can be assigned in XAML by setting the ",(0,l.kt)("inlineCode",{parentName:"p"},"Classes")," property to a space-separated list of strings. The following example applies the ",(0,l.kt)("inlineCode",{parentName:"p"},"h1")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"blue")," style classes to a ",(0,l.kt)("inlineCode",{parentName:"p"},"Button"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-markup"},'<Button Classes="h1 blue"/>\n')),(0,l.kt)("p",null,"If you need to add or remove class by condition, you can use the following special syntax:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-markup"},'<Button Classes.blue="{Binding IsSpecial}" />\n')),(0,l.kt)("p",null,"Style classes can also be manipulated in code using the ",(0,l.kt)("inlineCode",{parentName:"p"},"Classes")," collection:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},'control.Classes.Add("blue");\ncontrol.Classes.Remove("red");\n')),(0,l.kt)("h3",{id:"pseudoclasses"},"Pseudoclasses"),(0,l.kt)("p",null,"Also as in CSS, controls can have pseudoclasses; these are classes that are defined by the control itself rather than by the user. Pseudoclasses start with a ",(0,l.kt)("inlineCode",{parentName:"p"},":")," character."),(0,l.kt)("p",null,"One example of a pseudoclass is the ",(0,l.kt)("inlineCode",{parentName:"p"},":pointerover")," ","(","similar to ",(0,l.kt)("inlineCode",{parentName:"p"},":hover")," in CSS",")","."),(0,l.kt)("p",null,"Pseudoclasses provide the functionality of ",(0,l.kt)("inlineCode",{parentName:"p"},"Triggers")," in WPF and ",(0,l.kt)("inlineCode",{parentName:"p"},"VisualStateManager")," in UWP:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-markup"},'<StackPanel>\n  <StackPanel.Styles>\n    <Style Selector="Border:pointerover">\n      <Setter Property="Background" Value="Red"/>\n    </Style>\n  </StackPanel.Styles>\n  <Border>\n    <TextBlock>I will have red background when hovered.</TextBlock>\n  </Border>\n</StackPanel>\n')),(0,l.kt)("p",null,"Another example that involves changing properties inside of control ",(0,l.kt)("a",{parentName:"p",href:"/avalonia-docs/docs/styling/selectors#template"},"template"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-markup"},'<StackPanel>\n  <StackPanel.Styles>\n    <Style Selector="Button:pressed /template/ ContentPresenter">\n        <Setter Property="TextBlock.Foreground" Value="Red"/>\n    </Style>\n  </StackPanel.Styles>\n  <Button>I will have red text when pressed.</Button>\n</StackPanel>\n')),(0,l.kt)("p",null,"Other pseudoclasses include ",(0,l.kt)("inlineCode",{parentName:"p"},":focus"),", ",(0,l.kt)("inlineCode",{parentName:"p"},":disabled"),", ",(0,l.kt)("inlineCode",{parentName:"p"},":pressed")," for buttons, ",(0,l.kt)("inlineCode",{parentName:"p"},":checked")," for checkboxes etc."),(0,l.kt)("h3",{id:"custom-pseudoclasses"},"Custom PseudoClasses"),(0,l.kt)("p",null,"You can create own pseudoclasses for your ",(0,l.kt)("inlineCode",{parentName:"p"},"CustomControl")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"TemplatedControl"),".\nThe function below adds or remove a pseudoclass depending on a boolean value on a ",(0,l.kt)("inlineCode",{parentName:"p"},"StyledElement"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},'PseudoClasses.Set(":className", bool);\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"*Remember:")," PseudoClasses always starts with a ",(0,l.kt)("inlineCode",{parentName:"p"},":"),"!*"),(0,l.kt)("h3",{id:"selectors"},"Selectors"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Selectors")," select a control using a custom selector syntax which is very similar to the syntax used for CSS selectors. An example of some selectors:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Selector"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Button")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Selects all ",(0,l.kt)("inlineCode",{parentName:"td"},"Button")," controls")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Button.red")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Selects all ",(0,l.kt)("inlineCode",{parentName:"td"},"Button")," controls with the ",(0,l.kt)("inlineCode",{parentName:"td"},"red")," style class")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Button.red.large")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Selects all ",(0,l.kt)("inlineCode",{parentName:"td"},"Button")," controls with the ",(0,l.kt)("inlineCode",{parentName:"td"},"red")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"large")," style classes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Button:focus")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Selects all ",(0,l.kt)("inlineCode",{parentName:"td"},"Button")," controls with the ",(0,l.kt)("inlineCode",{parentName:"td"},":focus")," pseudoclass")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Button.red:focus")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Selects all ",(0,l.kt)("inlineCode",{parentName:"td"},"Button")," controls with the ",(0,l.kt)("inlineCode",{parentName:"td"},"red")," style class and the ",(0,l.kt)("inlineCode",{parentName:"td"},":focus")," pseudoclass")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Button#myButton")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Selects a ",(0,l.kt)("inlineCode",{parentName:"td"},"Button")," control with a name of ",(0,l.kt)("inlineCode",{parentName:"td"},"myButton"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"StackPanel Button.foo")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Selects all ",(0,l.kt)("inlineCode",{parentName:"td"},"Button"),"s with the ",(0,l.kt)("inlineCode",{parentName:"td"},"foo")," class that are descendants of a ",(0,l.kt)("inlineCode",{parentName:"td"},"StackPanel"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"StackPanel > Button.foo")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Selects all ",(0,l.kt)("inlineCode",{parentName:"td"},"Button"),"s with the ",(0,l.kt)("inlineCode",{parentName:"td"},"foo")," class that are children of a ",(0,l.kt)("inlineCode",{parentName:"td"},"StackPanel"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Button /template/ ContentPresenter")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Selects all ContentPresenter controls inside of Button's template")))),(0,l.kt)("p",null,"For more information see the ",(0,l.kt)("a",{parentName:"p",href:"/avalonia-docs/docs/styling/selectors"},"selectors documentation"),"."),(0,l.kt)("h3",{id:"setters"},"Setters"),(0,l.kt)("p",null,"A style's setters describe what will happen when the selector matches a control. They are simple property/value pairs written in the format:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-markup"},'<Setter Property="FontSize" Value="24"/>\n<Setter Property="Padding" Value="4 2 0 4"/>\n')),(0,l.kt)("p",null,"You can also use long-form syntax to declare more complex object values:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-markup"},'<Setter Property="MyProperty">\n   <MyObject Property1="My Value"/>\n</Setter>\n')),(0,l.kt)("p",null,"Bindings can also be applied using setters and can bind to the target control's ",(0,l.kt)("inlineCode",{parentName:"p"},"DataContext"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-markup"},'<Setter Property="FontSize" Value="{Binding SelectedFontSize}"/>\n')),(0,l.kt)("p",null,"Whenever a style is matched with a control, all of the setters will be applied to the control. If a style selector causes the style to no longer match a control, the property value will revert to the its next highest priority value."),(0,l.kt)("p",null,"Note that the ",(0,l.kt)("inlineCode",{parentName:"p"},"Setter")," creates a single instance of ",(0,l.kt)("inlineCode",{parentName:"p"},"Value")," which will be applied to all controls that the style matches: if the object is mutable then changes will be reflected on all controls. Following on from this, any bindings on an ",(0,l.kt)("em",{parentName:"p"},"object within the setter ",(0,l.kt)("inlineCode",{parentName:"em"},"Value"))," will not have access to the target control's ",(0,l.kt)("inlineCode",{parentName:"p"},"DataContext")," as there may be multiple target controls:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-markup"},'<Style Selector="local|MyControl">\n  <Setter Property="MyProperty">\n     <MyObject Property1="{Binding MyViewModelProperty}"/>\n  </Setter>\n</Style>\n')),(0,l.kt)("p",null,"In the above example, the binding source will be ",(0,l.kt)("inlineCode",{parentName:"p"},"MyObject.DataContext"),", not ",(0,l.kt)("inlineCode",{parentName:"p"},"MyControl.DataContext")," and if ",(0,l.kt)("inlineCode",{parentName:"p"},"MyObject")," has no data context then the binding will not be able to produce a value."),(0,l.kt)("p",null,"Note: at present, if you are using compiled bindings, you need to explicitly set the data type of the binding source in the ",(0,l.kt)("inlineCode",{parentName:"p"},"<Style>")," element:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-markup"},'<Style Selector="MyControl" x:DataType="MyViewModelClass">\n  <Setter Property="ControlProperty" Value="{Binding MyViewModelProperty}" />\n</Style>\n')),(0,l.kt)("h3",{id:"templates-in-setters"},"Templates in Setters"),(0,l.kt)("p",null,"As mentioned above, usually a single instance of a setter's ",(0,l.kt)("inlineCode",{parentName:"p"},"Value")," is created and shared across all matching controls. Due to this, to use a control as a setter value, the control must be wrapped in a ",(0,l.kt)("inlineCode",{parentName:"p"},"<Template>"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-markup"},'<Style Selector="Border.empty">\n  <Setter Property="Child">\n    <Template>\n      <TextBlock>No content available.</TextBlock>\n    </Template>\n  </Setter>\n</Style>\n')),(0,l.kt)("h3",{id:"style-precedence"},"Style Precedence"),(0,l.kt)("p",null,"If multiple styles match a control, and they both attempt to set the same property then the style ",(0,l.kt)("em",{parentName:"p"},"closest to the control")," will win. Consider the following example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-markup"},'<Window xmlns="https://github.com/avaloniaui"\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">\n    <Window.Styles>\n        <Style Selector="TextBlock.h1">\n            <Setter Property="FontSize" Value="24"/>\n            <Setter Property="FontWeight" Value="Bold"/>\n        </Style>\n    </Window.Styles>\n\n    <StackPanel>\n        <StackPanel.Styles>\n            <Style Selector="TextBlock.h1">\n                <Setter Property="FontSize" Value="48"/>\n                <Setter Property="Foreground" Value="Red"/>\n            </Style>\n        </StackPanel.Styles>\n\n        <TextBlock Classes="h1">\n            <TextBlock.Styles>\n                <Style Selector="TextBlock.h1">\n                    <Setter Property="Foreground" Value="Blue"/>\n                </Style>\n            </TextBlock.Styles>\n\n            I\'m a Heading!\n        </TextBlock>\n    </StackPanel>\n</Window>\n')),(0,l.kt)("p",null,"Here the ",(0,l.kt)("inlineCode",{parentName:"p"},"h1")," style is defined in multiple places. The ",(0,l.kt)("inlineCode",{parentName:"p"},"TextBlock")," will end up with the following settings:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Property"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Value"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Source"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"FontSize")),(0,l.kt)("td",{parentName:"tr",align:"left"},"48"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"StackPanel"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"FontWeight")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Bold"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Window"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Foreground")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Blue"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"TextBlock"))))),(0,l.kt)("p",null,"If more than one style setter applies to a property, the value that takes precedence will be:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The value from the style defined in the ancestor closest to the control"),(0,l.kt)("li",{parentName:"ul"},"For two styles declared in the same ",(0,l.kt)("inlineCode",{parentName:"li"},"Styles")," collection, the style that appears later")))}m.isMDXComponent=!0}}]);