"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[5197],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),u=i,h=d["".concat(s,".").concat(u)]||d[u]||m[u]||o;return n?a.createElement(h,r(r({ref:t},c),{},{components:n})):a.createElement(h,r({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9326:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));const o={id:"locating-views",title:"Locating Views"},r=void 0,l={unversionedId:"tutorials/todo-list-app/locating-views",id:"version-0.10.x/tutorials/todo-list-app/locating-views",title:"Locating Views",description:"Hold on, rewind a second. An observant reader will have noticed something strange going on in the last section.",source:"@site/versioned_docs/version-0.10.x/tutorials/todo-list-app/locating-views.md",sourceDirName:"tutorials/todo-list-app",slug:"/tutorials/todo-list-app/locating-views",permalink:"/avalonia-docs/docs/tutorials/todo-list-app/locating-views",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/versioned_docs/version-0.10.x/tutorials/todo-list-app/locating-views.md",tags:[],version:"0.10.x",frontMatter:{id:"locating-views",title:"Locating Views"},sidebar:"documentationSidebar",previous:{title:"Wiring up the Views",permalink:"/avalonia-docs/docs/tutorials/todo-list-app/wiring-up-the-views"},next:{title:"Adding new Items",permalink:"/avalonia-docs/docs/tutorials/todo-list-app/adding-new-items"}},s={},p=[],c={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Hold on, rewind a second. An observant reader will have noticed something strange going on ",(0,i.kt)("a",{parentName:"p",href:"wiring-up-the-views"},"in the last section"),"."),(0,i.kt)("p",null,"Views/MainWindow.axaml"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markup"},'<Window xmlns="https://github.com/avaloniaui"\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n        x:Class="Todo.Views.MainWindow"\n        Icon="/Assets/avalonia-logo.ico"\n        Width="200" Height="300"\n        Title="Avalonia Todo"\n        Content="{Binding List}">\n</Window>\n')),(0,i.kt)("p",null,"We bound the ",(0,i.kt)("inlineCode",{parentName:"p"},"Window.Content")," property to the ",(0,i.kt)("inlineCode",{parentName:"p"},"MainWindowViewModel.List")," property which is an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"TodoListViewModel")," but the window is displaying a ",(0,i.kt)("inlineCode",{parentName:"p"},"TodoListView"),"! What's happening here? How is a view being displayed when the window content is a view model?"),(0,i.kt)("p",null,"The answer can be found in ",(0,i.kt)("inlineCode",{parentName:"p"},"ViewLocator.cs")," which was a file added by the template:"),(0,i.kt)("p",null,"ViewLocator.cs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing Avalonia.Controls;\nusing Avalonia.Controls.Templates;\nusing Todo.ViewModels;\n\nnamespace Todo\n{\n    public class ViewLocator : IDataTemplate\n    {\n        public bool SupportsRecycling => false;\n\n        public IControl Build(object data)\n        {\n            var name = data.GetType().FullName.Replace("ViewModel", "View");\n            var type = Type.GetType(name);\n\n            if (type != null)\n            {\n                return (Control)Activator.CreateInstance(type);\n            }\n            else\n            {\n                return new TextBlock { Text = "Not Found: " + name };\n            }\n        }\n\n        public bool Match(object data)\n        {\n            return data is ViewModelBase;\n        }\n    }\n}\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ViewLocator")," defines a ",(0,i.kt)("a",{parentName:"p",href:"../../templates/data-templates"},"data template")," which converts view models into views. It defines two methods:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Match(object data)")," looks at the data and if the data inherits from ",(0,i.kt)("inlineCode",{parentName:"li"},"ViewModelBase")," it returns ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," indicating that ",(0,i.kt)("inlineCode",{parentName:"li"},"Build")," should be called"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Build(object data)")," takes the fully qualified name of the data's type and replaces the string ",(0,i.kt)("inlineCode",{parentName:"li"},'"ViewModel"')," with the string ",(0,i.kt)("inlineCode",{parentName:"li"},'"View"'),". It then tries to get a type that matches that name. If a matching type is found, it creates an instance of the type and returns it")),(0,i.kt)("p",null,"An instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"ViewLocator")," is present in ",(0,i.kt)("inlineCode",{parentName:"p"},"Application.DataTemplates"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markup"},'<Application xmlns="https://github.com/avaloniaui"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             xmlns:local="clr-namespace:Todo"\n             x:Class="Todo.App">\n    <Application.DataTemplates>\n        <local:ViewLocator/>\n    </Application.DataTemplates>\n\n    <Application.Styles>\n        <StyleInclude Source="avares://Avalonia.Themes.Default/DefaultTheme.xaml"/>\n        <StyleInclude Source="avares://Avalonia.Themes.Default/Accents/BaseLight.xaml"/>\n    </Application.Styles>\n</Application>\n')),(0,i.kt)("p",null,"When an instance of ",(0,i.kt)("a",{parentName:"p",href:"../../controls/contentcontrol"},"ContentControl")," ","(","such as ",(0,i.kt)("inlineCode",{parentName:"p"},"Window"),")"," has its ",(0,i.kt)("inlineCode",{parentName:"p"},"Content")," property set to a non-control, it searches up the tree of controls for a ",(0,i.kt)("inlineCode",{parentName:"p"},"DataTemplate")," that matches the content data. If no other ",(0,i.kt)("inlineCode",{parentName:"p"},"DataTemplate")," matches the data it will eventually reach the ",(0,i.kt)("inlineCode",{parentName:"p"},"ViewLocator")," in the application data templates which will do its business and return an instance of the corresponding view."),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"}," ",(0,i.kt)("inlineCode",{parentName:"p"},"ViewLocator")," is included in the project's source instead of being a component of Avalonia itself because the mechanism of relating a view model to a view may be application-specific; for example one might want to implement it using a DI framework. ",(0,i.kt)("inlineCode",{parentName:"p"},"ViewLocator")," can be thought of as implementing the ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Convention_over_configuration"},"convention over configuration")," paradigm.")))}m.isMDXComponent=!0}}]);