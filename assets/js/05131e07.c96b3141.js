"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[60593],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>b});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),i=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=i(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},g=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=i(n),g=r,b=p["".concat(s,".").concat(g)]||p[g]||d[g]||a;return n?o.createElement(b,l(l({ref:t},u),{},{components:n})):o.createElement(b,l({ref:t},u))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=g;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:r,l[1]=c;for(var i=2;i<a;i++)l[i]=n[i];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}g.displayName="MDXCreateElement"},3662:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>i});var o=n(87462),r=(n(67294),n(3905));const a={id:"togglebutton",title:"ToggleButton"},l=void 0,c={unversionedId:"controls/buttons/togglebutton",id:"version-0.10.x/controls/buttons/togglebutton",title:"ToggleButton",description:"The ToggleButton control is a subclass of the Button control that has a built-in checked state. This means the button can be checked or unchecked on click by a user. You may change the styling of controls based on whether ToggleButton is checked or not by using the :checked pseudoclass.",source:"@site/versioned_docs/version-0.10.x/controls/buttons/togglebutton.md",sourceDirName:"controls/buttons",slug:"/controls/buttons/togglebutton",permalink:"/avalonia-docs/docs/controls/buttons/togglebutton",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/versioned_docs/version-0.10.x/controls/buttons/togglebutton.md",tags:[],version:"0.10.x",frontMatter:{id:"togglebutton",title:"ToggleButton"},sidebar:"documentationSidebar",previous:{title:"RadioButton",permalink:"/avalonia-docs/docs/controls/buttons/radiobutton"},next:{title:"ButtonSpinner",permalink:"/avalonia-docs/docs/controls/buttons/buttonspinner"}},s={},i=[{value:"Source code",id:"source-code",level:2},{value:"Examples",id:"examples",level:2},{value:"Speaker Mute Button",id:"speaker-mute-button",level:3}],u={toc:i},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ToggleButton")," control is a subclass of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Button")," control that has a built-in ",(0,r.kt)("inlineCode",{parentName:"p"},"checked")," state. This means the button can be checked or unchecked on click by a user. You may change the styling of controls based on whether ",(0,r.kt)("inlineCode",{parentName:"p"},"ToggleButton")," is checked or not by using the ",(0,r.kt)("inlineCode",{parentName:"p"},":checked")," ",(0,r.kt)("a",{parentName:"p",href:"../../styling/styles#pseudoclasses"},"pseudoclass.")),(0,r.kt)("h2",{id:"source-code"},"Source code"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/AvaloniaUI/Avalonia/blob/master/src/Avalonia.Controls/Primitives/ToggleButton.cs"},"ToggleButton.cs")),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("h3",{id:"speaker-mute-button"},"Speaker Mute Button"),(0,r.kt)("p",null,"This button will show a muted speaker icon or an un-muted speaker icon based on whether the button is checked or unchecked, which the ",(0,r.kt)("inlineCode",{parentName:"p"},"ToggleButton")," control toggles between when users click on the button."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-markup"},'<Style Selector="ToggleButton DrawingPresenter.tbchecked">\n    <Setter Property="IsVisible" Value="False"/>\n</Style>\n<Style Selector="ToggleButton:checked DrawingPresenter.tbchecked">\n    <Setter Property="IsVisible" Value="True"/>\n</Style>\n<Style Selector="ToggleButton DrawingPresenter.tbunchecked">\n    <Setter Property="IsVisible" Value="True"/>\n</Style>\n<Style Selector="ToggleButton:checked DrawingPresenter.tbunchecked">\n    <Setter Property="IsVisible" Value="False"/>\n</Style>\n')),(0,r.kt)("p",null,"The style code above reacts to ",(0,r.kt)("inlineCode",{parentName:"p"},"ToggleButton"),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},":checked")," pseudoclass, so that if the ",(0,r.kt)("inlineCode",{parentName:"p"},"ToggleButton")," is checked, any ",(0,r.kt)("inlineCode",{parentName:"p"},"DrawingPresenter")," with the class ",(0,r.kt)("inlineCode",{parentName:"p"},".tbchecked")," will be visible, and any ",(0,r.kt)("inlineCode",{parentName:"p"},"DrawingPresenter")," with the class ",(0,r.kt)("inlineCode",{parentName:"p"},".tbunchecked")," will not be visible."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-markup"},'<ToggleButton Classes="vtrx" IsChecked="{Binding Path=vtrx.muted}" ToolTip.Tip="stop audio">\n    <Panel>\n        <DrawingPresenter Drawing="{DynamicResource Icon.Speaker}" Classes="tbunchecked"/>\n        <DrawingPresenter Width="14" Height="14" Margin="14,14,0,0" Drawing="{DynamicResource Icon.SpeakerMute}" Classes="tbchecked"/>\n    </Panel>\n</ToggleButton>\n')))}d.isMDXComponent=!0}}]);