"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[25243],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=o,h=p["".concat(s,".").concat(m)]||p[m]||u[m]||r;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},91846:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=n(87462),o=(n(67294),n(3905));const r={id:"respond-to-an-event",title:"Respond to an Event"},i=void 0,l={unversionedId:"get-started/test-drive/respond-to-an-event",id:"get-started/test-drive/respond-to-an-event",title:"Respond to an Event",description:"There are a number of ways you can implement actions in an Avalonia application. On this page, you will see how to use one of the simplest: how to write event handling code for a button click.",source:"@site/docs/get-started/test-drive/response-to-an-event.md",sourceDirName:"get-started/test-drive",slug:"/get-started/test-drive/respond-to-an-event",permalink:"/avalonia-docs/docs/next/get-started/test-drive/respond-to-an-event",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/get-started/test-drive/response-to-an-event.md",tags:[],version:"current",frontMatter:{id:"respond-to-an-event",title:"Respond to an Event"},sidebar:"documentationSidebar",previous:{title:"The Design Preview",permalink:"/avalonia-docs/docs/next/get-started/test-drive/the-design-preview"},next:{title:"Code With Controls",permalink:"/avalonia-docs/docs/next/get-started/test-drive/code-with-controls"}},s={},c=[{value:"Code-behind",id:"code-behind",level:2}],d={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"There are a number of ways you can implement actions in an Avalonia application. On this page, you will see how to use one of the simplest: how to write event handling code for a button click."),(0,o.kt)("p",null,"To start, you will write a button click event handler that does not interact with any of the other controls."),(0,o.kt)("h2",{id:"code-behind"},"Code-behind"),(0,o.kt)("p",null,"The XAML file for the main window has a C# code-behind file associated with it. If you're using an IDE, you can find this file in the ",(0,o.kt)("strong",{parentName:"p"},"Solution Explorer")," - it is a sub-item of the ",(0,o.kt)("inlineCode",{parentName:"p"},".axaml")," file."),(0,o.kt)("div",{style:{textAlign:"center"}},(0,o.kt)("img",{src:"/img/get-started/respond-to-an-event/image (59).png",alt:""})),(0,o.kt)("p",null,"To change the code-behind for the main window:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Open the ",(0,o.kt)("inlineCode",{parentName:"li"},"MainWindow.axaml.cs")," file")),(0,o.kt)("p",null,"You will see some C# code like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"using Avalonia.Controls;\n\nnamespace GetStartedApp\n{\n    public partial class MainWindow : Window\n    {\n        public MainWindow()\n        {\n            InitializeComponent();\n        }\n    }\n}\n")),(0,o.kt)("p",null,"The partial class ",(0,o.kt)("inlineCode",{parentName:"p"},"MainWindow")," corresponds to the window object that is created by Avalonia UI as a result of the XAML you already have. You can find this class name in the XAML window tag:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},'<Window \n    ...\n    x:Class="GetStartedApp.MainWindow" >\n</Window>\n')),(0,o.kt)("p",null,"To add an event handler for the button, follow this procedure:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Locate the  ",(0,o.kt)("inlineCode",{parentName:"li"},"MainWindow")," constructor in the code-behind file for the main window (see above instructions)."),(0,o.kt)("li",{parentName:"ul"},"After the constructor add the following code:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'public void ButtonClicked(object source, RoutedEventArgs args)\n{\n    Debug.WriteLine("Click!");\n}\n')),(0,o.kt)("p",null,"This will require some additional using statements:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"using Avalonia.Interactivity;\nusing System.Diagnostics;\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Switch to the XAML file and locate the ",(0,o.kt)("inlineCode",{parentName:"li"},"<Button>")," tag."),(0,o.kt)("li",{parentName:"ul"},"Enter the click attribute at the end of the tag, as follows:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},'<Button\n   ...\n   Click="ButtonClicked">\n</Button>\n')),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"If you're using an IDE you will see the Avalonia UI Intellisense as you type."),(0,o.kt)("div",{style:{textAlign:"center"}},(0,o.kt)("img",{src:"/img/get-started/respond-to-an-event/image (25) (2).png",alt:""}))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Run the app and click the button.")),(0,o.kt)("p",null,"You should see the result on the Output window for Debug, like this:"),(0,o.kt)("div",{style:{textAlign:"center"}},(0,o.kt)("img",{src:"/img/get-started/respond-to-an-event/image (54).png",alt:""})),(0,o.kt)("p",null,"On the next page, you will see how to use code-behind to read and change the properties of Avalonia UI controls at runtime."))}u.isMDXComponent=!0}}]);